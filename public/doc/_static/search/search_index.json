{"config": {}, "docs": [{"location": "../examples.html", "text": "Examples Connection to a running backend instance Connector URI SSL context Binary frames Logger Attempts Instance Load a model Loader Geometries Models Update a model Color a circuit Switch between original color and simulation color Take a snapshot Target Camera Renderer Light Snapshot Export frames Simulation Frame indices View Color ramp Frame exporter Make a movie from exported frames FFMPEG Movie Launch Brayns backend from Python Service Process Start a service and connect to it in the same script", "title": "Examples"}, {"location": "../examples_connector.html", "text": "Connection to a running backend instance Now that the Python package is installed and that we saw how to basically connect to a braynsService instance (backend), we can see more advanced connection settings. Connector The connector is a simple dataclass object (struct) that holds the connection settings. It is required to be able to connect to an instance and needs at least the URI of the backend server as seen previously. Here is an example of connector with more settings: import logging import brayns connector = brayns . Connector ( uri = 'localhost:5000' , ssl_context = brayns . SslClientContext ( cafile = 'certification_authority.pem' , ), binary_handler = lambda data : print ( len ( data )), logger = brayns . Logger ( logging . INFO ), max_attempts = 10 , attempt_period = 0.2 , ) with connector . connect () as instance : instance . request ( 'schema' , { 'endpoint' : 'get-version' }) URI The URI parameter is used to find the backend instance as mentioned in the usage section Using Brayns Python API . SSL context The SSL context depends on the backend SSL settings. If left to None (the default), the connection will not be secured. The ssl_context should be chosen as follows: If the backend is not secure, it can be left to None. If the backend certificate is signed by a recognized certification authority (CA) installed on the client machine, it can be default constructed. If the backend certificate is signed by a custom CA (or self-signed), this CA can be set as trusted by setting it in the SSL context (like above). Binary frames A Brayns instance can stream binary frames (images) on demand. It is mainly used for the Web client (BraynsCircuitStudio) but they can be handled by a callback specified in the connector (here it just prints it). Logger The connector and the instance (once connected) log messages that can be useful for debugging. By default Brayns logs to stdout and only messages with severity WARN or superior. This level can be changed by passing brayns.Logger as logger to the connector, constructed with the level from logging built-in module. User can specify a custom logger to redirect the logs or change the level as long as the logger is a subclass of logging.Logger. Brayns default logger can be constructed with brayns.Logger(<level>). Usually for production it is better not to log anything but warnings (default). However, logging.INFO can be used to trace JSON-RPC messages (useful for debugging). For more advanced debug, logging.DEBUG can be used but it prints the requests / replies content (not only the method and ID) so it can be very verbose. Attempts By default, if the connection to the backend fails, Connector.connect will raise an exception and cancel the connection. A new attempts can then safely be made. However, it can be convenient to try multiple times (or forever) if the backend if not available yet. For example if you started a braynsService instance automatically, you have no way to know when it is ready from the Python and might want to wait for it in the connect() call. That\u2019s why the connector can be configured to try max_attempts times to reach the backend before raising an exception with a delay of attempt_period between each try. If max_attempts is set to None, the connector will try to connect indefinitely until it manages to reach the backend ( attempt_period is still taken into account). Attention If another connection error occurs than the service being unavailable (SSL error, protocol error), retrying is pointless, as the same error will be raised again and again. Therefore, these kind of errors are raised regardless of max_attempts and attempt_period . Instance Once connector.connect() succeeds, a backend instance brayns.Instance is returned. It can be used to send raw JSON-RPC requests to braynsService. The instance must be disconnected using instance.disconnect() once user is done with it. It can be done automatically using a context manager (like above). However using the low level JSON-RPC API can be tedious and is subject to changes, that is why it is better to use high level functionalities provided as functions and classes by the package (see next sections).", "title": "Connection to a running backend instance"}, {"location": "../examples_exporter.html", "text": "Export frames When a model has a simulation attached, we might want to render multiple frames to make a movie from them. To avoid recreating a snapshot context in the backend for each image, a frame export allows us to create the context once and use it to take multiple snapshots more efficiently. Simulation The simulation settings are global in Brayns, which means we have one single state for the simulation in an instance. simulation = brayns . get_simulation ( instance ) print ( simulation . start_frame ) print ( simulation . end_frame ) print ( simulation . current_frame ) print ( simulation . delta_time ) This global state is automatically updated each time we load a model with a simulation attached. The time unit is always milliseconds but a convenience attribute time_unit is in the simulation to convert it in seconds. All time values in simulation are expressed in time_unit except when it is explicitely stated being in seconds. Simulation also provides convenience method to convert frame indices to timestamp and vice-versa. Frame indices First we have to specify the indices of the simulation frames we want to export. Usually, we just know the start and end frame we want to render, the movie FPS (frames per second) and possibly how much slower we want the movie. To generate frame indices from these informations, We can use a helper class named MovieFrames . frames = brayns . MovieFrames ( fps = 25 , slowing_factor = 1 , start_frame = 0 , end_frame =- 1 , ) indices = frames . get_indices ( simulation ) Attention The index step is computed with the following formula: step = simulation_fps / movie_fps / slowing_factor If the step is smaller than 1, some frames will be duplicated to match the target FPS. Attention You need to remember the movie FPS you set if you want to make a movie from the exported frames. View As we render multiple frames, we can have one view per frame. This is specified using a list KeyFrame objects, each having a frame index and a camera view. Here we will suppose the view is the same for all frames (static camera). key_frames = brayns . KeyFrame . from_indices ( indices , view ) Color ramp The color ramp is an object attached to models with a simulation. It allows to map a value range (usually voltages) to a color range (list of colors). This part is optional as Brayns build a default color ramp for circuits. # Get the color ramp. ramp = brayns . get_color_ramp ( instance , model . id ) # Set the simulation values. ramp . value_range = brayns . ValueRange ( - 80 , 10 ) # Choose colors (could be Color4 for simple cases): # Simulation values of -80 and below will be red. # Simulation values around -35 (middle of value range) will be green. # Simulation values of +10 and above will be blue. # Between these values, the color is linearly interpolated (mixed). colors = [ brayns . Color3 . red , brayns . Color3 . green , brayns . Color3 . blue , ] # Optional opacity curve for complex alpha channels: # Colors from 0% to 50% of the value range will be transparent. # Colors from 50% to 100% of the value range will be interpolated from alpha # = 0 to alpha = 1. curve = brayns . OpacityCurve ([ brayns . ControlPoint ( 0.0 , 0.0 ), brayns . ControlPoint ( 0.5 , 0.0 ), brayns . ControlPoint ( 1.0 , 1.0 ), ]) # Generate the colors with opacity. ramp . colors = curve . apply ( colors ) # Update the color ramp. brayns . set_color_ramp ( instance , model . id , ramp ) Frame exporter The exporter class can render frames into a given folder. All export parameters (resolution, camera, renderer, format, key frames) can be specified in its constructor. # Frame export specifications. exporter = brayns . FrameExporter ( frames = key_frames , format = brayns . ImageFormat . PNG , resolution = brayns . Resolution . full_hd , projection = brayns . PerspectiveProjection (), renderer = brayns . InteractiveRenderer (), ) # Export to given folder. exporter . export_frames ( instance , 'path/to/frames' )", "title": "Export frames"}, {"location": "../examples_loader.html", "text": "Load a model Everything that is rendered by Brayns is called Model . A model is usually an assembly of primitives (spheres, boxes, planes, meshes, \u2026) and can have a simulation attached to it. A simulation can change the model color or radius depending on the global Simulation state (current frame). The user is responsible to choose the current simulation frame, the backend doesn\u2019t perform any update on this. Models can be built from different file formats. The support to parse and load different files (SONATA, BlueConfig, DTI, \u2026) is added by plugins Brayns plugins . By default, Brayns only supports mesh loading without plugins. Loader Loaders contain the settings to load specific file formats. They are mostly contained in the braynsCircuitExplorer plugin (SONATA, BBP) for the backend support and in SonataLoader and BbpLoader for the Python API. Here in this example, we will load a file a BBP format (BlueConfig). loader = brayns . BbpLoader ( cells = brayns . BbpCells . from_density ( 0.01 ), report = brayns . BbpReport . compartment ( 'soma' ), morphology = brayns . Morphology ( radius_multiplier = 10 , load_soma = True , load_axon = False , load_dendrites = True , geometry_type = brayns . GeometryType . SMOOTH , ) ) Here we won\u2019t get too much in the details of the parameters as they depend on the loader but basically user can specify: The density of cells to load, it can also be specified by target or by listing the GIDs. Which report to load (here compartment or spike) with the report parameters. How to load the morphologies of the circuit (radius multiplier, which parts to load, \u2026). Geometries Raw geometries with custom colors can also be loaded using a list of objects. A geometry is basically a primitive shape (sphere, box, \u2026) with a color. It always create one single model per function call. model = brayns . add_geometries ( instance , [ brayns . Sphere ( 0.1 ) . with_color ( brayns . Color4 . red ), brayns . Sphere ( 0.2 , center = brayns . Vector3 . one ), ]) Models Now we can use the loader to load models from a file and retreive them. circuit_path = 'path/to/BlueConfig' models = loader . load ( instance , circuit_path ) # We will take the first one for the next examples. model = models [ 0 ] It returns a list of Model created by the loader (usually it is a single model). It is important to get their ID ( model.id ) if you need to update them. Model can also be retreived with get_model and removed using remove_models , to select the IDs to erase, or clear_models to remove them all. Update a model Models can be moved and made invisible using the update_model function. Hint The model transform is the identity by default and is relative to the original location of the object when loaded. # We use the transform to move the model. transform = model . transform # Move the model upward. transform . translation += 3 * brayns . Vector3 . up # Rotate the model of 90 degrees around Y. euler = brayns . Vector3 ( 0 , 90 , 0 ) transform . rotation = brayns . Rotation . from_euler ( euler , degrees = True ) # Upload the model and retreive its new state. # It is important to use the model returned by update_model as the bounds # will be updated if we change the transform. model = brayns . update_model ( instance , model . id , transform = transform , visible = False , ) Color a circuit Models loaded from a circuit (not regular models) can be colored using special methods. Here is an example to color SSCX circuit by layer. # Choose a coloring method. method = brayns . ColorMethod . LAYER # Map method value to color. color = brayns . color_circuit_by_method ( instance , model . id , method , { '1' : brayns . Color4 ( 255 , 242 , 59 , 255 ) / 255 , '2' : brayns . Color4 ( 248 , 148 , 48 , 255 ) / 255 , '3' : brayns . Color4 ( 225 , 45 , 97 , 255 ) / 255 , '4' : brayns . Color4 ( 253 , 156 , 250 , 255 ) / 255 , '5' : brayns . Color4 ( 103 , 168 , 222 , 255 ) / 255 , '6' : brayns . Color4 ( 106 , 230 , 109 , 255 ) / 255 , }) Available color methods and method values for a given circuit (model) can be retreived using get_color_methods and get_color_method_values . Some alternatives exist with color_circuit_by_id and color_circuit . Switch between original color and simulation color If a model has a simulation attached, its original color can be overriden by the simulation color. To avoid this enable_simulation can be used to enable / disable simulation colors for a given model.", "title": "Load a model"}, {"location": "../examples_movie.html", "text": "Make a movie from exported frames Now that we have exported some simulation frames, we can make a movie from it. FFMPEG Brayns Python package relies on FFMPEG binary executable to create a movie from exported frames. On Ubuntu personal machines, it can be installed with this command. $ sudo apt install ffmpeg On a BB5 node you can use these commands. $ module load unstable $ module load ffmpeg Movie The Movie class in Brayns Python package is only a convenience tools to wrap an FFMPEG command line. It requires the frames folder, their format and the movie FPS. An incoherent FPS from the export will generate an incorrect movie duration. movie = brayns . Movie ( frames_folder = 'path/to/frames' , frames_format = brayns . ImageFormat . PNG , fps = 25 , ) movie . save ( 'path/to/movie.mp4' ) The duration of the output movie is simply fps x frame_count. A different resolution can be specified but by default the frame size is used. The path to FFMPEG executable is ffmpeg by default but can be modified. Attention The frame filenames must have the exporter format with 5 digits specifying the frame index and the format extension (.png or .jpg). If the FrameExporter was used, they are already at the good format. Example: 00001.png, 00002.png, \u2026", "title": "Make a movie from exported frames"}, {"location": "../examples_service.html", "text": "Launch Brayns backend from Python Service The Service class of the Python API can be used to start a braynsService backend instance programmatically. It is basically a wrapper around the command line, that is why an executable of braynsService is required to use it. By default the executable taken by the service is braynsService so it must be in the system PATH. On BB5 running this command line will add braynsService to the PATH. $ module load unstable $ module load brayns On a local machine or without loading brayns module, the executable can still be specified manually using the executable parameter of the service. User can specify the server URI, the log level and some SSL and stream settings of the braynsService started by the service. service = brayns . Service ( uri = '0.0.0.0:5000' , log_level = brayns . LogLevel . DEBUG , ) Process Use start to start a new braynsService process. Its behavior is the same as a backend instance started manually except that it can be monitored from Python. Here a value of 100 for max_attempts is chosen to let some time to the process to start propertly. The timeout is approximately max_attempts * attempt_period (in seconds) but it can be disabled with max_attempts=None . The current logs (stdout and stderr) of a Process can be retreived at any time using the logs property of the object. connector = brayns . Connector ( 'localhost:5000' , max_attempts = None ) with service . start () as process : with connector . connect () as instance : print ( brayns . get_version ( instance )) print ( process . logs ) Attention Use the context manager to automatically call stop on the process started by the service (or call it manually) otherwise it will never get terminated and keep running after your script is finished. Start a service and connect to it in the same script Brayns also provides a helper class to manage both the service and its connector named Manager . It can be obtained using a Service and a Connector with the start function. service = brayns . Service ( 'localhost:5000' ) connector = brayns . Connector ( 'localhost:5000' ) with brayns . start ( service , connector ) as ( process , instance ): print ( brayns . get_version ( instance )) print ( process . logs ) Attention As for the process, use the context manager to automatically call stop on the manager or do it manually.", "title": "Launch Brayns backend from Python"}, {"location": "../examples_snapshot.html", "text": "Take a snapshot Now that we can load models, it is time to render something. Target First we have to choose which models to render and for that we need the bounds of the area we want to see in the snapshot. # Focus on a specific model. target = model . bounds # Or the entire scene. target = brayns . get_bounds ( instance ) # Or a list of models. target = brayns . merge_bounds ([ item . bounds for item in models ]) Camera A camera is composed of a view (position, target and up direction) and a projection (3D -> 2D transformation). As the current camera of a brayns instance is not automatically moved to focus on the current scene, a custom camera is needed to see something. # Compute camera view and projection to focus on target. # The camera use the front view by default (X right, Y up and Z front). camera = brayns . look_at ( target ) # We can also specify the projection manually (Perspective by default). projection = brayns . OrthographicProjection () camera = brayns . look_at ( target , projection ) # The camera can be moved manually. # Here we rotate of -90 degrees around X using the camera target as center. top_view = brayns . Vector3 ( - 90 , 0 , 0 ) camera . rotate_around_target ( top_view ) Renderer Brayns has two renderers available, one for fast / interactive rendering and another one for slow and precise rendering (production). renderer = brayns . InteractiveRenderer () # Or renderer = brayns . ProductionRenderer () The renderer can also be used to configure the number of samples per pixel ( antialiasing) and the ray bounces (reflection of light from a non emissive surface to another). Light By default, Brayns scene is empty, that is why we need to add a light to be able to see the models we want to render. light = brayns . DirectionalLight ( intensity = 4 , direction = camera . direction , ) light_model = brayns . add_light ( instance , light ) Here we add a directional light oriented from the camera to the target. The model returned can be used to remove or tranform it, but in this example we don\u2019t use it. Lights can be selectively removed with remove_models , or cleared using clear_lights . Snapshot Now we have everything we need to take a snapshot. snapshot = brayns . Snapshot ( resolution = brayns . Resolution . full_hd , frame = 3 , camera = camera , renderer = renderer , ) snapshot . save ( instance , 'snapshot.png' ) We can here specify also a resolution and a simulation frame. If any of the parameter is None, then the current object of the instance is taken. That\u2019s it, snapshots can also be saved on the backend machine using save_remotely or retreived as raw bytes using download .", "title": "Take a snapshot"}, {"location": "../index.html", "text": "Brayns API Introduction Brayns provides a JSON-RPC API accessible through a websocket to interact with a running instance of braynsService (renderer backend). For convenience, it also provides a Python package to wrap the websocket communication with classes and functions to hide low level JSON-RPC messages. This API (websocket or Python) has the following features: Load models into brayns (circuits, DTIs, meshes, volumes, \u2026). Load and/or attach simulations (compartment and spike reports). Modify their visual appearance (color, simulation color ramp, \u2026). Tune the renderers to achieve different visual results. Render images and simulation videos and save it to disk. Acknowledgments Authors and Contributors Daniel Nachbaur Cyrille Favreau Jonas Karlsson Roland Groza Nadir Roman Grigori Chevtchenko Pawel Podhajski Adrien Devresse Sebastien Speierer Fabien Petitjean Adrien Fleury Reporting issues Brayns is currently maintained by the BlueBrain Visualization team. Should you face any issue with using it, please submit a ticket to the issue tracker ; or drop us an email .", "title": "Brayns API"}, {"location": "../install.html", "text": "Installation This section describes how to install brayns Python package. Note that a running renderer backend instance (braynsService) is required to be able to perform some rendering, the Python package is basically just a websocket client. To be able to interact with a running instance of braynsService, websockets can be used directly but the easiest way is to use the Python API. To use raw websocket and JSON-RPC to interact with the backend, the API reference can be found under JSON-RPC API reference with endpoints documentation. In this case, no installation is required and this section can be skipped but a custom websocket client has to be written. Otherwise the Brayns Python client is distributed as a Python package named \u201cbrayns\u201d and must be installed. Currently only Python 3.9+ is supported so for platforms with older system version, it can be installed using: Python version $ sudo apt install python3.9 As for all Python projects, it is recommended (but not required) to use a virtual environment. It can be created with the following commands (update the paths with the one your environment folder): Python virtual environment (optional) # Use python3.9 instead of python if system version is older $ python -m venv mypythonvenv Now it can be activated with: $ source mypythonvenv/bin/activate And deactivated with: $ deactivate With the Python environment activated (optional) one of the following methods can be used to install brayns Python package. Package installation From Python Pacakge Index (PyPI) The easiest way is to access the latest release is the following: $ pip install brayns And that\u2019s it, no other steps are required. From source For development or to get a more recent version than the one released on PyPI, the package can also be installed from the github repository sources using: # Clone Brayns repo $ git clone https://github.com/BlueBrain/Brayns.git # Go inside the Python package source folder $ cd Brayns/python # Build a source distribution ( tar.gz ) $ python setup.py sdist # Install the distribution with pip ( output in dist folder ) $ pip install dist/* Now brayns installation is complete. On BB5 On BB5 the Python package can be installed like on a local machine with a virtual environment but it is also available on spack without any installation. It can be activated as follows: # Allocate a node, can also be done with sbatch $ salloc --account = <projXXX> -p interactive -t 8 :00:00 --exclusive --constraint = cpu -c 72 --mem 0 # Load brayns module with Python $ module load unstable $ module load python $ module load brayns/latest Now brayns package should be available in the Python system version. The renderer backend (braynsService) should also be available in the current path once brayns module is loaded. Otherwise on a local machine, it must be compiled from source.", "title": "Installation"}, {"location": "../jsonrpcapi/api.html", "text": "JSON-RPC API reference Atlas Explorer API methods get-available-atlas-usecases visualize-atlas-usecase Circuit Info API methods ci-get-afferent-cell-ids ci-get-cell-data ci-get-cell-ids ci-get-cell-ids-from-model ci-get-efferent-cell-ids ci-get-projection-efferent-cell-ids ci-get-projections ci-get-report-info ci-get-reports ci-get-spike-report-info ci-get-targets ci-info Circuit Explorer API methods color-circuit-by-id color-circuit-by-method color-circuit-by-single-color get-circuit-color-method-variables get-circuit-color-methods set-circuit-thickness trace-anterograde Core API methods add-boxes add-capsules add-clip-plane add-light-ambient add-light-directional add-light-quad add-model add-planes add-spheres cancel clear-clip-planes clear-lights clear-models enable-simulation exit-later export-frames get-application-parameters get-camera-look-at get-camera-orthographic get-camera-perspective get-camera-type get-loaders get-material-carpaint get-material-default get-material-emissive get-material-glass get-material-matte get-material-metal get-material-plastic get-material-type get-model get-model-transfer-function get-renderer-interactive get-renderer-production get-renderer-type get-scene get-simulation-parameters get-version image-jpeg inspect quit registry remove-model schema set-application-parameters set-camera-look-at set-camera-orthographic set-camera-perspective set-material-carpaint set-material-default set-material-emissive set-material-glass set-material-matte set-material-metal set-material-plastic set-model-transfer-function set-renderer-interactive set-renderer-production set-simulation-parameters snapshot trigger-jpeg-stream update-model upload-model", "title": "JSON-RPC API reference"}, {"location": "../jsonrpcapi/api_atlasexplorer_methods.html", "text": "Atlas Explorer API methods This page references the entrypoints of the Atlas Explorer plugin. get-available-atlas-usecases Returns a list of available atlas visualization usecases for the given model. Params : type object properties model_id ID of the model holding an atlas volume type integer minimum 0 additionalProperties False Result : type array items type string visualize-atlas-usecase Visualizes the specified use case based on the atlas data of the given model. Params : type object properties model_id ID of the model holding an atlas volume type integer minimum 0 params Additional use case parameters use_case Use case name type string additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False", "title": "Atlas Explorer API methods"}, {"location": "../jsonrpcapi/api_circuitexplorer_methods.html", "text": "Circuit Explorer API methods This page references the entrypoints of the Circuit Explorer plugin. color-circuit-by-id Colors a circuit model by element ID. Specific IDs can be targeted, otherwise, random colors per ID will be applied. Returns a list of IDs that were not colored (if any). Params : type object properties color_info List of IDs with their corresponding color. If empty, all the model will be colored with random colors per ID type array items ColoringInformation type object properties color Color applied to the given variable (Normalized RGBA) type array items type number maxItems 4 minItems 4 variable Variable of the coloring method being used type string additionalProperties False model_id ID of the model to color type integer minimum 0 additionalProperties False Result : type array items type integer minimum 0 color-circuit-by-method Colors a circuit model by grouping its elements using the given method. Specific variables can be targetted, otherwise, random colors per variable group will be applied. Params : type object properties color_info List of IDs with their corresponding color. If empty, all the model will be colored with random colors per ID type array items ColoringInformation type object properties color Color applied to the given variable (Normalized RGBA) type array items type number maxItems 4 minItems 4 variable Variable of the coloring method being used type string additionalProperties False method Method to use for coloring type string model_id ID of the model to color type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. color-circuit-by-single-color Colors a whole circuit model with a single color. Params : type object properties color Color to use for the whole circuit (Normalized RGBA) type array items type number maxItems 4 minItems 4 model_id ID of the model to color type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. get-circuit-color-method-variables Return the available variables which can be specified when coloring a circuit model by the given method. Params : type object properties method Name of the method to query type string model_id ID of the model to query type integer minimum 0 additionalProperties False Result : type object properties variables Available variables for the given circuit model and method type array items type string additionalProperties False get-circuit-color-methods Return the available extra coloring methods for a circuit model. Params : type object properties model_id ID of the model to query type integer minimum 0 additionalProperties False Result : type object properties methods Available coloring methods type array items type string additionalProperties False set-circuit-thickness Modify the geometry radiuses (spheres, cones, cylinders and SDF geometries). Params : type object properties model_id ID of the circuit model type integer minimum 0 radius_multiplier Scaling factor type number additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. trace-anterograde Performs neuronal tracing showing efferent and afferent synapse relationship between cells (including projections). Params : type object properties cell_gids List of cell GIDs to use a source of the tracing type array items type integer minimum 0 connected_cells_color RGBA normalized color to apply to the target cells geometry type array items type number maxItems 4 minItems 4 model_id Model where to perform the neuronal tracing type integer minimum 0 non_connected_cells_color RGBA normalized color to apply to the rest of cells type array items type number maxItems 4 minItems 4 source_cell_color RGBA normalized color to apply to the source cell geometry type array items type number maxItems 4 minItems 4 target_cell_gids List of cells GIDs which are the result of the given tracing mode type array items type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null.", "title": "Circuit Explorer API methods"}, {"location": "../jsonrpcapi/api_circuitinfo_methods.html", "text": "Circuit Info API methods This page references the entrypoints of the Circuit Info plugin. ci-get-afferent-cell-ids Return a list of afferent synapses cell GIDs from a circuit and a set of source cells. Params : type object properties path Path to the circuit config file type string sources Source cells GIDs type array items type integer minimum 0 additionalProperties False Result : type object properties ids Afferent cells unique GIDs type array items type integer minimum 0 additionalProperties False ci-get-cell-data Return data attached to one or many cells. Params : type object properties ids List of cell IDs type array items type integer minimum 0 path Path to circuit config file type string properties Desired properties type array items type string additionalProperties False Result : type object properties etypes Requested cell e-types type array items type string layers Requested cell layers type array items type string morphology_classes Requested cell morphology classes type array items type string mtypes Requested cell m-types type array items type string orientations Requested cell orientations type array items type number positions Requested cell positions type array items type number additionalProperties False ci-get-cell-ids Return the list of GIDs from a circuit. Params : type object properties path Path to the circuit config file type string targets Targets to query type array items type string additionalProperties False Result : type object properties ids List of cell GIDs type array items type integer minimum 0 additionalProperties False ci-get-cell-ids-from-model Return the list of GIDs from a loaded circuit. Params : type object properties model_id ID of the circuit model type integer minimum 0 additionalProperties False Result : type object properties ids List of cell GIDs type array items type integer minimum 0 additionalProperties False ci-get-efferent-cell-ids Return a list of efferent synapses cell GIDs from a circuit and a set of source cells. Params : type object properties path Path to the circuit config file type string sources Source cells GIDs type array items type integer minimum 0 additionalProperties False Result : type object properties ids Efferent cells unique GIDs type array items type integer minimum 0 additionalProperties False ci-get-projection-efferent-cell-ids Return a list of efferent projected synapses cell GIDs from a circuit and a set of source cells. Params : type object properties path Path to the circuit config file type string projection Projection name type string sources Source cells GIDs type array items type integer minimum 0 additionalProperties False Result : type object properties ids Efferent cells GIDs type array items type integer minimum 0 additionalProperties False ci-get-projections Return a list of projection names available on a circuit. Params : type object properties path Path to the circuit config file type string additionalProperties False Result : type object properties projections Projections names type array items type string additionalProperties False ci-get-report-info Return information about a specific report from a circuit. Params : type object properties path Path to the circuit BlueConfig from which to get the report type string report Name of the report from where to get the information type string additionalProperties False Result : type object properties data_unit Unit of the report values. Can be (mV, mA, \u2026) type string end_time Time at which the simulation ends type number frame_count Number of simulation frames in the report type integer minimum 0 frame_size Number of values per frame in the report type integer minimum 0 start_time Time at which the simulation starts type number time_step Time between two consecutive simulation frames type number time_unit Unit of the report time values type string additionalProperties False ci-get-reports Return a list of reports from a circuit. Params : type object properties path Path to the circuit config file type string additionalProperties False Result : type object properties reports Report names type array items type string additionalProperties False ci-get-spike-report-info Return wether the circuit has a spike report and its path. Params : type object properties path Path of the circuit to test type string additionalProperties False Result : type object properties exists Check if the report exists type boolean path Path to the spike report type string additionalProperties False ci-get-targets Return a list of targets from a circuit. Params : type object properties path Path to the circuit config file type string additionalProperties False Result : type object properties targets Target names type array items type string additionalProperties False ci-info Return general info about a circuit. Params : type object properties path Path of the circuit config file type string additionalProperties False Result : type object properties cells_count Number of cells in this circuit type integer minimum 0 cells_properties List of available cell properties type array items type string e_types List of electrical types available in this circuit type array items type string m_types List of morphology types available in this circuit type array items type string reports List of report names type array items type string spike_report Path to the spike report file type string targets List of target names type array items type string additionalProperties False", "title": "Circuit Info API methods"}, {"location": "../jsonrpcapi/api_core_methods.html", "text": "Core API methods This page references the entrypoints of the Core plugin. add-boxes Adds a list of boxes to the scene. Params : type array items GeometryWithColor<Box> type object properties color Geometry color type array items type number maxItems 4 minItems 4 geometry Box Geometry data type object properties max Maximum bound corner (top front right) type array items type number maxItems 3 minItems 3 min Minimum bound corner (bottom back left) type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-capsules Adds a list of capsules to the scene. Params : type array items GeometryWithColor<Capsule> type object properties color Geometry color type array items type number maxItems 4 minItems 4 geometry Capsule Geometry data type object properties p0 Starting point of the capsule type array items type number maxItems 3 minItems 3 p1 Ending point of the capsule type array items type number maxItems 3 minItems 3 r0 Capsule radius at p0 type number r1 Capsule radius at p1 type number additionalProperties False additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-clip-plane Add a clip plane and returns the clip plane ID. Params : type object properties coefficients Plane equation coefficients (A, B, C, D from Ax + By + Cz + D = 0) type array items type number maxItems 4 minItems 4 additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-light-ambient Adds an ambient light which iluminates the scene from all directions. Params : type object properties color Light color (Normalized RGB) type array items type number maxItems 3 minItems 3 intensity Light intensity type number minimum 0 visible Light visibility type boolean additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-light-directional Adds a directional light which iluminates the scene from a given direction. Params : type object properties color Light color (Normalized RGB) type array items type number maxItems 3 minItems 3 direction Light direction vector type array items type number maxItems 3 minItems 3 intensity Light intensity type number minimum 0 visible Light visibility type boolean additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-light-quad Add a quad light which iluminates the scene on a specific area. Params : type object properties color Light color (Normalized RGB) type array items type number maxItems 3 minItems 3 edge1 Sets one of the quad light edges type array items type number maxItems 3 minItems 3 edge2 Sets one of the quad light edges type array items type number maxItems 3 minItems 3 intensity Light intensity type number minimum 0 position Sets the corner position of the quad light type array items type number maxItems 3 minItems 3 visible Light visibility type boolean additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-model Add model from path and return model descriptor on success. This entrypoint is asynchronous, it means that it can take a long time and send progress notifications. Params : type object properties loader_name Name of the loader to use type string loader_properties Settings to configure the loading process path Path to the file to load type string additionalProperties False Result : type array items ModelInstance type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-planes Adds a list of planes to the scene. Params : type array items GeometryWithColor<Plane> type object properties color Geometry color type array items type number maxItems 4 minItems 4 geometry Plane Geometry data type object properties coefficients Plane equation coefficients (A, B, C, D from Ax + By + Cz + D = 0) type array items type number maxItems 4 minItems 4 additionalProperties False additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False add-spheres Adds a list of spheres to the scene. Params : type array items GeometryWithColor<Sphere> type object properties color Geometry color type array items type number maxItems 4 minItems 4 geometry Sphere Geometry data type object properties center Sphere center point type array items type number maxItems 3 minItems 3 radius Sphere radius type number additionalProperties False additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False cancel Cancel the task started by the request with the given ID. Params : type object properties id RequestId ID of the request to cancel oneOf type null type integer type string additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. clear-clip-planes Clear all clip planes in the scene. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. clear-lights Clear all lights in the scene. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. clear-models Clear all models in the scene. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. enable-simulation A switch to enable or disable simulation on a model. Params : type object properties enabled Bool flag enabling or disabling the simulation type boolean model_id ID of the model to enable or disable simulation type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. exit-later Schedules Brayns to shutdown after a given amount of minutes. Params : type object properties minutes Number of minutes after which Brayns will shut down type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. export-frames Export a list of keyframes as images to disk. This entrypoint is asynchronous, it means that it can take a long time and send progress notifications. Params : type object properties camera EngineObjectData Camera definition type object properties name Object type name type string params Object parameters additionalProperties False image_settings ImageSettings Image settings type object properties format Image format (jpg or png) type string quality Image quality (0 = lowest quality, 100 = highest quality type integer minimum 0 size Image dimensions [width, height] type array items type integer minimum 0 maxItems 2 minItems 2 additionalProperties False key_frames List of keyframes to export type array items ExportFramesKeyFrame type object properties camera_view View Camera view settings type object properties position Camera position type array items type number maxItems 3 minItems 3 target Camera target type array items type number maxItems 3 minItems 3 up Camera up vector type array items type number maxItems 3 minItems 3 additionalProperties False frame_index Integer index of the simulation frame type integer minimum 0 additionalProperties False path Path where the frames will be stored type string renderer EngineObjectData Renderer definition type object properties name Object type name type string params Object parameters additionalProperties False sequential_naming Name the image file after the frame index type boolean default True additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. get-application-parameters Get the current state of the application parameters. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties jpeg_quality JPEG quality type integer maximum 100 minimum 0 plugins Loaded plugins type array items type string viewport Window size type array items type integer minimum 0 maxItems 2 minItems 2 additionalProperties False get-camera-look-at Returns the camera view settings. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties position Camera position type array items type number maxItems 3 minItems 3 target Camera target type array items type number maxItems 3 minItems 3 up Camera up vector type array items type number maxItems 3 minItems 3 additionalProperties False get-camera-orthographic Returns the current camera as orthographic. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties height Orthographic projection plane height type number additionalProperties False get-camera-perspective Returns the current camera as perspective. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties aperture_radius Lens aperture radius type number focus_distance Camera focus distance type number fovy Vertical field of view type number additionalProperties False get-camera-type Returns the type of the current camera. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type string get-loaders Get all loaders. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type array items LoaderInfo type object properties extensions Supported file extensions type array items type string input_parameters_schema Loader properties type object name Loader name type string additionalProperties False get-material-carpaint Returns the material of the given model as a car paint material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 flake_density Metal flakes density type number maximum 1 minimum 0 additionalProperties False get-material-default Returns the material of the given model as a phong material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False get-material-emissive Returns the material of the given model as a emissive material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 intensity Emitted light intensity type number minimum 0 additionalProperties False get-material-glass Returns the material of the given model as a glass material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 index_of_refraction Index of refraction of the glass type number additionalProperties False get-material-matte Returns the material of the given model as a matte material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False get-material-metal Returns the material of the given model as a metal material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 roughness Surface roughness type number maximum 1 minimum 0.01 additionalProperties False get-material-plastic Returns the material of the given model as a plastic material, if possible. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False get-material-type Returns the type of the material of a given model, if any. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type string get-model Get all the information of the given model. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False get-model-transfer-function Get the transfer function of the given model. Params : type object properties id Model ID type integer minimum 0 additionalProperties False Result : type object properties colors List of colors (RGBA) to map type array items type array items type number maxItems 4 minItems 4 range Values range type array items type number maxItems 2 minItems 2 additionalProperties False get-renderer-interactive Returns the current renderer as interactive renderer, if possible. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties ao_samples Ambient occlusion samples type integer background_color Background color type array items type number maxItems 4 minItems 4 enable_shadows Enable casted shadows when rendering type boolean max_ray_bounces Maximum ray bounces type integer samples_per_pixel Ray samples per pixel type integer minimum 1 additionalProperties False get-renderer-production Returns the current renderer as production renderer, if possible. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties background_color Background color type array items type number maxItems 4 minItems 4 max_ray_bounces Maximum ray bounces type integer samples_per_pixel Ray samples per pixel type integer minimum 1 additionalProperties False get-renderer-type Returns the type of the renderer currently being used. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type string get-scene Get the current state of the scene. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties bounds Bounds Scene bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False models Scene models type array items ModelInstance type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False additionalProperties False get-simulation-parameters Get the current state of the simulation parameters. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties current Current frame index type integer minimum 0 dt Frame time type number end_frame Global final simulation frame index type integer minimum 0 start_frame Global initial simulation frame index type integer minimum 0 unit Time unit type string additionalProperties False get-version Get Brayns instance version. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties major Major version type integer minor Minor version type integer patch Patch level type integer revision SCM revision type string additionalProperties False image-jpeg Take a snapshot at JPEG format. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type object properties data Image data with base64 encoding type string additionalProperties False inspect Inspect the scene at x-y position. Params : type object properties position Position XY (normalized) type array items type number maxItems 2 minItems 2 additionalProperties False Result : type object properties hit A boolean flag indicating wether there was a hit. If false, the rest of the fields must be ignored type boolean metadata Extra attributes which vary depending on the type of model hitted model_id ID of the model hitted type integer minimum 0 position 3D hit position type array items type number maxItems 3 minItems 3 additionalProperties False quit Quit the application. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. registry Retreive the names of all registered entrypoints. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : type array items type string remove-model Remove the model(s) from the ID list from the scene. Params : type object properties ids List of model ID to remove type array items type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. schema Get the JSON schema of the given entrypoint. Params : type object properties endpoint Name of the endpoint type string additionalProperties False Result : type object properties async Check if the entrypoint is asynchronous type boolean description Description of the entrypoint type string params Input schema type object plugin Name of the plugin that loads the entrypoint type string returns Output schema type object title Name of the entrypoint type string additionalProperties False set-application-parameters Set the current state of the application parameters. Params : type object properties jpeg_quality JPEG quality type integer maximum 100 minimum 0 plugins Loaded plugins type array items type string viewport Window size type array items type integer minimum 0 maxItems 2 minItems 2 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-camera-look-at Sets the camera view settings. Params : type object properties position Camera position type array items type number maxItems 3 minItems 3 target Camera target type array items type number maxItems 3 minItems 3 up Camera up vector type array items type number maxItems 3 minItems 3 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-camera-orthographic Sets the current camera to an orthographic one, with the specified parameters. Params : type object properties height Orthographic projection plane height type number additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-camera-perspective Sets the current camera to a perspective one, with the specified parameters. Params : type object properties aperture_radius Lens aperture radius type number focus_distance Camera focus distance type number fovy Vertical field of view type number additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-carpaint Updates the material of the given model to a Car paint material. This material is only usable with the production renderer. Params : type object properties material CarPaint Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 flake_density Metal flakes density type number maximum 1 minimum 0 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-default Updates the material of the given model to the Default material. This material works with all renderers. It has a matte appearance.. Params : type object properties material Phong Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-emissive Updates the material of the given model to an Emisive material. This material is only usable with the production renderer. Params : type object properties material Emissive Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 intensity Emitted light intensity type number minimum 0 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-glass Updates the material of the given model to a Glass material. This material is only usable with the production renderer. Params : type object properties material Glass Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 index_of_refraction Index of refraction of the glass type number additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-matte Updates the material of the given model to a Matte material. This material is only usable with the production renderer. Params : type object properties material Matte Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-metal Updates the material of the given model to a Metal material. This material is only usable with the production renderer. Params : type object properties material Metal Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 roughness Surface roughness type number maximum 1 minimum 0.01 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-material-plastic Updates the material of the given model to a Plastic material. This material is only usable with the production renderer. Params : type object properties material Plastic Material parameters type object properties color Base color of the material type array items type number maxItems 3 minItems 3 opacity Opacity of the surface type number maximum 1 minimum 0 additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-model-transfer-function Set the transfer function of the given model. Params : type object properties id Model ID type integer minimum 0 transfer_function ColorRamp Transfer function type object properties colors List of colors (RGBA) to map type array items type array items type number maxItems 4 minItems 4 range Values range type array items type number maxItems 2 minItems 2 additionalProperties False additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-renderer-interactive Sets the system renderer to the interactive one. Params : type object properties ao_samples Ambient occlusion samples type integer background_color Background color type array items type number maxItems 4 minItems 4 enable_shadows Enable casted shadows when rendering type boolean max_ray_bounces Maximum ray bounces type integer samples_per_pixel Ray samples per pixel type integer minimum 1 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-renderer-production Sets the system renderer to the production one. Params : type object properties background_color Background color type array items type number maxItems 4 minItems 4 max_ray_bounces Maximum ray bounces type integer samples_per_pixel Ray samples per pixel type integer minimum 1 additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. set-simulation-parameters Set the current state of the simulation parameters. Params : type object properties current Current frame index type integer minimum 0 dt Frame time type number end_frame Global final simulation frame index type integer minimum 0 start_frame Global initial simulation frame index type integer minimum 0 unit Time unit type string additionalProperties False Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. snapshot Take a snapshot with given parameters. This entrypoint is asynchronous, it means that it can take a long time and send progress notifications. Params : type object properties camera EngineObjectData Camera definition type object properties name Object type name type string params Object parameters additionalProperties False camera_view View Camera \u2018look at\u2019 view settings type object properties position Camera position type array items type number maxItems 3 minItems 3 target Camera target type array items type number maxItems 3 minItems 3 up Camera up vector type array items type number maxItems 3 minItems 3 additionalProperties False file_path Snapshot will be saved at this path if specified, otherwise it will be returned encoded in base64 with format from image_settings type string image_settings ImageSettings Image settings type object properties format Image format (jpg or png) type string quality Image quality (0 = lowest quality, 100 = highest quality type integer minimum 0 size Image dimensions [width, height] type array items type integer minimum 0 maxItems 2 minItems 2 additionalProperties False renderer EngineObjectData Renderer definition type object properties name Object type name type string params Object parameters additionalProperties False simulation_frame Simulation frame to render type integer minimum 0 additionalProperties False Result : type object properties data Image data with base64 encoding type string additionalProperties False trigger-jpeg-stream Triggers the engine to stream a frame to the clients. Params : This entrypoint has no params, the \u201cparams\u201d field can hence be omitted or null. Result : This entrypoint has no result, the \u201cresult\u201d field is still present but is always null. update-model Update the model with the given values and return its new state. Params : type object properties model ModelInstance Model data to update type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False model_id Model ID type integer minimum 0 additionalProperties False Result : type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False upload-model Upload a model from binary request data and return model descriptors on success. This entrypoint is asynchronous, it means that it can take a long time and send progress notifications. Params : type object properties loader_name Loader name type string loader_properties Loader properties type File extension type string additionalProperties False Result : type array items ModelInstance type object properties bounds Bounds Model axis-aligned bounds type object properties max Bounds maximum (top front right corner) type array items type number maxItems 3 minItems 3 min Bounds minimum (bottom back left corner) type array items type number maxItems 3 minItems 3 additionalProperties False info ModelInfo Model-specific metadata type object properties base_transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False load_info LoadInfo Model load information type object properties load_parameters Loader configuration loader_name Loader used type string path File path in case of file load type type string source Model load source type string enum from_file, from_blob, none additionalProperties False metadata Model-specific metadata type object additionalProperties type string additionalProperties False is_visible Wether the model is being rendered or not type boolean model_id Model ID type integer minimum 0 transform Transform Model transform type object properties rotation Rotation XYZW type array items type number maxItems 4 minItems 4 scale Scale XYZ type array items type number maxItems 3 minItems 3 translation Translation XYZ type array items type number maxItems 3 minItems 3 additionalProperties False additionalProperties False", "title": "Core API methods"}, {"location": "../plugins.html", "text": "Brayns plugins Introduction Brayns architecture allows it to be used for almost any kind of visualization purpose. For this reason, the core of Brayns knows nowthing about any science-specific modeling. To load specific functionality, the Brayns backend service must be launched with the command to load specifiying plugins, which will add extra functionality. Plugins command line arguments can be chained to load multiple plugins. Plugin names are the name of the dynamic libraries (.so) implementing it. $ braynsService --uri 0 .0.0.0:5000 --plugin braynsCircuitExplorer --plugin braynsDTI Brayns comes with built-in plugins that are always available and can be loaded at runtime. Circuit Explorer plugin The Circuit Explorer plugin is the main Brayns plugin for neuroscientific visualization. It provides Brayns with extra features, such as: Load neuronal circuits and simulations based on CircuitConfig / BlueConfig. Load SONATA multi-population networks and simulations. Load morphology files (Ascii, SWC or H5). Load BlueConfig/SONATA multi-population hybrid circuits. For further information on the Circuit Explorer\u2019s JSON-RPC API, refer to Circuit Explorer API methods . To load the Circuit Explorer plugin when launching the Brayns backend service, use the following argument in the command line: --plugin braynsCircuitExplorer Atlas Explorer plugin The Atlas Explorer plugin is used to visualize atlas data as volumes. It also adds a loader for NRRD files. For further information on the Atlas Explorer\u2019s JSON-RPC API, refer to Atlas Explorer API methods To load the Atlas Explorer plugin when launching the Brayns backend service, use the following argument in the command line: --plugin braynsAtlasExplorer Circuit Info plugin The Circuit Info plugin provides circuit-specific information. It is used by the brayns web interface WebBrayns. It can be used within the JSON-RPC API to query some circuit information, such as: List of GIDs (all, or from a list of target). List of targets. List of compartment reports, and report-specific information. Spike report information. List of projections. Efferent and afferent synapses for a set of GIDs. Projected efferent synapses for a set of GIDs and a projection. For information on the Circuit Info JSON-RPC API, refer to Circuit Info API methods . To load the Circuit Info plugin when launching the Brayns backend service, use the following argument in the command line: --plugin braynsCircuitInfo Attention This plugin is deprecated and will be removed soon. Use bluepy to query information about circuits. Diffusion Tensor Imaging plugin (DTI) The DTI plugin adds functionality to load streamlines into Brayns, as well as to attach a spike report simulation to them to be visualized. To load the DTI plugin when launching the Brayns backend service, use the following argument in the command line: --plugin braynsDTI Cylindric camera plugin This is a simple plugin to add support for cylindric camera. This camera fixes the distorsion of curved screen (i.e. OpenDeck). --plugin braynsCylindricCamera", "title": "Brayns plugins"}, {"location": "../pythonapi/api.html", "text": "Python API reference core Classes AmbientLight AmbientLight Application Application Box Box Camera Camera Capsule Capsule CarPaintMaterial CarPaintMaterial ClipPlane ClipPlane ClippingGeometry ClippingGeometry ColorRamp ColorRamp ControlPoint ControlPoint DefaultMaterial DefaultMaterial DirectionalLight DirectionalLight EmissiveMaterial EmissiveMaterial Entrypoint Entrypoint FrameExporter FrameExporter Geometry Geometry GlassMaterial GlassMaterial InteractiveRenderer InteractiveRenderer JsonSchema JsonSchema JsonType JsonType KeyFrame KeyFrame Light Light Loader Loader LoaderInfo LoaderInfo Material Material MatteMaterial MatteMaterial MeshLoader MeshLoader MetalMaterial MetalMaterial Model Model OpacityCurve OpacityCurve OrthographicProjection OrthographicProjection PerspectiveProjection PerspectiveProjection Plane Plane PlasticMaterial PlasticMaterial ProductionRenderer ProductionRenderer Projection Projection QuadLight QuadLight Renderer Renderer Scene Scene Simulation Simulation Snapshot Snapshot Sphere Sphere TimeUnit TimeUnit ValueRange ValueRange Version Version VersionError VersionError Functions add_clipping_geometry add_clipping_geometry() add_geometries add_geometries() add_light add_light() check_version check_version() clear_clipping_geometries clear_clipping_geometries() clear_lights clear_lights() clear_models clear_models() enable_simulation enable_simulation() get_application get_application() get_bounds get_bounds() get_camera get_camera() get_camera_name get_camera_name() get_camera_projection get_camera_projection() get_camera_view get_camera_view() get_color_ramp get_color_ramp() get_entrypoint get_entrypoint() get_entrypoints get_entrypoints() get_loaders get_loaders() get_material get_material() get_material_name get_material_name() get_methods get_methods() get_model get_model() get_models get_models() get_renderer get_renderer() get_renderer_name get_renderer_name() get_scene get_scene() get_simulation get_simulation() get_version get_version() look_at look_at() remove_models remove_models() set_camera set_camera() set_camera_projection set_camera_projection() set_camera_view set_camera_view() set_color_ramp set_color_ramp() set_material set_material() set_renderer set_renderer() set_simulation_frame set_simulation_frame() update_application update_application() update_model update_model() movie Classes Movie Movie MovieError MovieError MovieFrames MovieFrames Functions network Classes ConnectionClosedError ConnectionClosedError Connector Connector Instance Instance InvalidServerCertificateError InvalidServerCertificateError Logger Logger ProtocolError ProtocolError Request Request RequestError RequestError RequestFuture RequestFuture RequestProgress RequestProgress ServiceUnavailableError ServiceUnavailableError SslClientContext SslClientContext WebSocketError WebSocketError Functions plugins Classes BbpCells BbpCells BbpLoader BbpLoader BbpReport BbpReport BbpReportType BbpReportType CellId CellId ColorMethod ColorMethod CylindricProjection CylindricProjection GeometryType GeometryType Morphology Morphology MorphologyLoader MorphologyLoader SonataEdgePopulation SonataEdgePopulation SonataLoader SonataLoader SonataNodePopulation SonataNodePopulation SonataNodes SonataNodes SonataReport SonataReport SonataReportType SonataReportType Functions color_circuit color_circuit() color_circuit_by_id color_circuit_by_id() color_circuit_by_method color_circuit_by_method() get_color_method_values get_color_method_values() get_color_methods get_color_methods() service Classes LogLevel LogLevel Manager Manager Plugin Plugin Process Process Service Service SslServerContext SslServerContext Functions start start() utils Classes Bounds Bounds Color3 Color3 Color4 Color4 Error Error Fovy Fovy ImageFormat ImageFormat Quaternion Quaternion Resolution Resolution Rotation Rotation Transform Transform Vector3 Vector3 View View Functions lower_bound lower_bound() merge_bounds merge_bounds() parse_hex_color parse_hex_color() parse_image_format parse_image_format() upper_bound upper_bound()", "title": "Python API reference"}, {"location": "../pythonapi/core.html", "text": "core Brayns core functionalities. Provides high-level objects to wrap the raw JSON-RPC messages sent and received with an instance of Brayns service. Include access to camera, renderer, models, materials, snapshots, etc\u2026 Classes AmbientLight class AmbientLight ( color : Color3 = Color3(r=1.0, g=1.0, b=1.0) , intensity : float = 1.0 , visible : bool = True ) Bases: Light Ambient light with no particular properties. get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the light name. Returns : Light name. Return type : str Application class Application ( plugins : list [ str ] , resolution : Resolution , jpeg_quality : int ) Bases: object Store the application parameters of an instance. Parameters : plugins ( list [ str ] ) \u2013 List of plugins loaded in the instance. resolution ( Resolution ) \u2013 Streaming resolution (main framebuffer). jpeg_quality ( int ) \u2013 JPEG stream quality (0=lowest, 100=highest). jpeg_quality : int plugins : list [ str ] resolution : Resolution Box class Box ( min : Vector3 , max : Vector3 ) Bases: Geometry 3D box. Parameters : min ( Vector3 ) \u2013 Minimum XYZ. max ( Vector3 ) \u2013 Maximum XYZ. get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. max : Vector3 class property method : str JSON-RPC method to add boxes. Returns : JSON-RPC method. Return type : str min : Vector3 Camera class Camera ( view: ~brayns.utils.view.view.View = <factory> , projection: ~brayns.core.camera.projection.Projection = <factory> ) Bases: object Camera used to render. A camera is composed of a View and a Projection . The view defines the camera position and orientation while the projection defines how the model will be projected from 3D to 2D. To focus the camera to a given target (bounds) use look_at to set the default full-screen front view. The front view has X-right, Y-up and Z-forward. Then, to rotate the camera around its target, use rotate_around_target . property direction : Vector3 property distance : float look_at ( target : Bounds ) \u2192 None property name : str property position : Vector3 projection : Projection rotate_around_target ( rotation : Rotation ) \u2192 None property target : Vector3 property up : Vector3 property vector : Vector3 view : View Capsule class Capsule ( start_point : Vector3 , start_radius : float , end_point : Vector3 , end_radius : float ) Bases: Geometry Capsule (cylinder with slope and half spheres at extremities). Parameters : start_point ( Vector3 ) \u2013 Cylinder base XYZ. start_radius ( float ) \u2013 Cylinder and sphere base radius. end_point ( Vector3 ) \u2013 Cylinder end XYZ. end_radius ( float ) \u2013 Cylinder and sphere end radius. end_point : Vector3 end_radius : float get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property method : str JSON-RPC method to add capsules. Returns : JSON-RPC method. Return type : str start_point : Vector3 start_radius : float CarPaintMaterial class CarPaintMaterial ( flake_density : float = 0.0 ) Bases: Material Car paint material. Parameters : flake_density ( float , optional ) \u2013 Flake density (0-1), defaults to no flakes. flake_density : float = 0.0 get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. ClipPlane class ClipPlane ( a : float , b : float , c : float , d : float = 0.0 ) Bases: ClippingGeometry Clip plane. Described by the equation ax + by + cz + d = 0 . Where [a, b, c] is the normal of the plane and d the orthogonal distance from the origin. The normal vector indicates the upper side of the plane. Everything below the given plane is clipped: Multiple clip planes can be combined to slice a model in complex ways. Parameters : a ( float ) \u2013 X term of the plane equation. b ( float ) \u2013 Y term of the plane equation. c ( float ) \u2013 Y term of the plane equation. d ( float ) \u2013 Scalar term of the plane equation. a : float b : float c : float d : float = 0.0 get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property method : str Get the JSON-RPC method to add the clipping geometry. Returns : JSON-RPC method. Return type : str ClippingGeometry class ClippingGeometry Bases: ABC Base class used for clipping geometries. abstract get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. abstract class property method : str Get the JSON-RCP method to add the clipping geometry. Returns : JSON-RPC method. Return type : str ColorRamp class ColorRamp ( value_range : ValueRange , colors : list [ brayns.utils.color.color4.Color4 ] ) Bases: object Color ramp to map simulation values to colors. Simulation values below value_range.min have colors[0]. Simulation values above value_range.max have colors[-1]. Otherwise, the two closest colors in the list are interpolated linearly. Parameters : value_range ( ValueRange ) \u2013 Simulation value range (usually voltages). colors ( list [ Color4 ] ) \u2013 List of colors mapped to value range. colors : list [ brayns.utils.color.color4.Color4 ] value_range : ValueRange ControlPoint class ControlPoint ( normalized_value : float , opacity : float ) Bases: object Control point used for opacity curves. Normalized values are simulation values (usually voltages) normalized between the min and max of the color ramp value range. Parameters : normalized_value ( float ) \u2013 Simulation value, normalized. opacity ( float ) \u2013 Color opacity at simulation value. class property end : ControlPoint Implicit last control point of the opacity curve [1, 1]. Returns : Control point. Return type : ControlPoint normalized_value : float opacity : float class property start : ControlPoint Implicit first control point of the opacity curve [0, 0]. Returns : Control point. Return type : ControlPoint DefaultMaterial class DefaultMaterial ( opacity : float = 1.0 ) Bases: Material Default material. Parameters : opacity ( float , optional ) \u2013 Opacity (0-1), defaults to fully opaque. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str opacity : float = 1.0 update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. DirectionalLight class DirectionalLight ( color : Color3 = Color3(r=1.0, g=1.0, b=1.0) , intensity : float = 1.0 , visible : bool = True , direction : Vector3 = Vector3(x=0.0, y=0.0, z=-1.0) ) Bases: Light Light shining in a given direction. Parameters : direction ( Vector3 , optional ) \u2013 Light emission direction, defaults to -Z. direction : Vector3 = Vector3(x=0.0, y=0.0, z=-1.0) get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the light name. Returns : Light name. Return type : str EmissiveMaterial class EmissiveMaterial ( intensity : float = 1.0 ) Bases: Material Emissive material. Parameters : intensity ( float , optional ) \u2013 Light emission intensity, defaults to 1. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. intensity : float = 1.0 class property name : str Get the material name. Returns : Material name Return type : str update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. Entrypoint class Entrypoint ( method : str , description : str , plugin : str , asynchronous : bool , params : brayns.core.api.json_schema.JsonSchema | None , result : brayns.core.api.json_schema.JsonSchema | None ) Bases: object Entrypoint (endpoint) of the JSON-RPC API. Describes how a given entrypoint of the JSON-RPC API can be used. Available entrypoints can be queried from an instance to inspect the Web API of a given instance. Parameters : method ( str ) \u2013 JSON-RPC method (ex: \u2018get-camera-name\u2019). description ( str ) \u2013 Human readable description. plugin ( str ) \u2013 Name of the plugin which loads the entrypoint. asynchronous ( bool ) \u2013 Check wether progress and cancellation are supported. params ( JsonSchema | None ) \u2013 Schema of input if any, otherwise None. result ( JsonSchema | None ) \u2013 Schema of output if any, otherwise None. asynchronous : bool description : str method : str params : brayns.core.api.json_schema.JsonSchema | None plugin : str result : brayns.core.api.json_schema.JsonSchema | None FrameExporter class FrameExporter ( frames : list [ brayns.core.snapshot.key_frame.KeyFrame ] , format : ImageFormat = ImageFormat.PNG , resolution : Optional [ Resolution ] = None , projection : Optional [ Projection ] = None , renderer : Optional [ Renderer ] = None , jpeg_quality : int = 100 ) Bases: object Frame exporter to take multiple snapshots in an optimized way. Camera position can be different for each frame using KeyFrame objects. Does not modify the current settings of the instance (resolution, camera, etc\u2026). For parameters with None value, the current ones of the instance are used. Exported frames are named using 5 digits filenames (00000.png, 00001.png, 00003.png, etc\u2026). Parameters : frames ( list [ KeyFrame ] ) \u2013 Like of key frames to export. format ( ImageFormat , optional ) \u2013 Format of the exported frames, defaults to PNG. resolution ( Resolution | None , optional ) \u2013 Resolution of the exported frames, defaults to None. projection ( Projection | None , optional ) \u2013 Projection to use for render, defaults to None. renderer ( Renderer | None , optional ) \u2013 Renderer to use for render, defaults to None. jpeg_quality ( int , optional ) \u2013 JPEG quality if format is JPEG, defaults to 100. export_frames ( instance : Instance , folder : str ) \u2192 None Export frames to given folder. Parameters : instance ( Instance ) \u2013 Instance. folder ( str ) \u2013 Output folder. format : ImageFormat = 'png' frames : list [ brayns.core.snapshot.key_frame.KeyFrame ] jpeg_quality : int = 100 projection : brayns.core.camera.projection.Projection | None = None renderer : brayns.core.renderer.renderer.Renderer | None = None resolution : brayns.utils.image.resolution.Resolution | None = None Geometry class Geometry Bases: ABC Base class of all geometry types. The color attribute is white by default and is not in the constructor, use with_color to chain the color settings with the construction. Parameters : color ( Color4 ) \u2013 Geometry color, defaults to white. color : Color4 = Color4(r=1.0, g=1.0, b=1.0, a=1.0) abstract get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. abstract class property method : str JSON-RPC method to add geometries of the derived type. Returns : JSON-RPC method. Return type : str with_color ( color : Color4 ) \u2192 T Helper method to quickly change the color of the geometry. Example: sphere = brayns.Sphere(1).with_color(my_color) . Parameters : color ( Color4 ) \u2013 Geometry color. Returns : self Return type : type(self) GlassMaterial class GlassMaterial ( refraction_index : float = 1.5 ) Bases: Material Glass material. Parameters : refraction_index ( float , optional ) \u2013 Refraction index, defaults to 1.5. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str refraction_index : float = 1.5 update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. InteractiveRenderer class InteractiveRenderer ( samples_per_pixel : int = 1 , max_ray_bounces : int = 3 , background_color : Color4 = Color4(r=0.004, g=0.016, b=0.102, a=0.0) , enable_shadows : bool = True , ambient_occlusion_samples : int = 0 ) Bases: Renderer Default renderer used for fast rendering (streaming, tests). Parameters : enable_shadows ( bool , optional. ) \u2013 Enable shadows, defaults to True. ambient_occlusion_samples ( int , optional. ) \u2013 AO samples, defaults to 0. ambient_occlusion_samples : int = 0 enable_shadows : bool = True get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get renderer name. Returns : Renderer name. Return type : str update_additional_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. JsonSchema class JsonSchema ( title: str = '' , description: str = '' , type: ~brayns.core.api.json_type.JsonType = JsonType.UNDEFINED , read_only: bool = False , write_only: bool = False , default: ~typing.Optional[~typing.Any] = None , minimum: ~typing.Optional[float] = None , maximum: ~typing.Optional[float] = None , items: ~typing.Optional[~brayns.core.api.json_schema.JsonSchema] = None , min_items: ~typing.Optional[int] = None , max_items: ~typing.Optional[int] = None , properties: dict[str , brayns.core.api.json_schema.JsonSchema] = <factory> , required: list[str] = <factory> , additional_properties: ~typing.Optional[~typing.Union[bool , ~brayns.core.api.json_schema.JsonSchema]] = None , one_of: list[brayns.core.api.json_schema.JsonSchema] = <factory> , enum: list[typing.Any] = <factory> ) Bases: object JSON schema describing JSON-RPC message format. Parameters : title ( str ) \u2013 Title (class name). description ( str ) \u2013 Human readable description. type ( JsonType ) \u2013 JSON type (null, boolean, number, string, object, \u2026). read_only ( bool ) \u2013 If true, this field cannot be assigned. write_only ( bool ) \u2013 If true, this field cannot get retreived. default ( Any ) \u2013 Optional default value. minimum ( float | None ) \u2013 Optional minimum value for numbers. maximum ( float | None ) \u2013 Optional maximum value for numbers. items ( JsonSchema | None ) \u2013 Optional item schema value for arrays. min_items ( int | None ) \u2013 Optional minimum item count for arrays. max_items ( int | None ) \u2013 Optional maximum item count for arrays. properties ( dict [ str , JsonSchema ] ) \u2013 Optional fixed properties schema for objects. required ( list [ str ] ) \u2013 Optional list of required properties for objects. additional_properties ( bool | JsonSchema | None ) \u2013 Schema of additional properties for objects. If False then no additional properties are allowed (only fixed). If None then any additional properties are allowed (usually ignored). one_of ( list [ JsonSchema ] ) \u2013 If not empty, the schema is a union of several schemas. enum ( list [ Any ] ) \u2013 If not empty, the message must be in these values. additional_properties : bool | brayns.core.api.json_schema.JsonSchema | None = None default : unknown = None description : str = '' enum : list [ Any ] items : brayns.core.api.json_schema.JsonSchema | None = None max_items : int | None = None maximum : float | None = None min_items : int | None = None minimum : float | None = None one_of : list [ brayns.core.api.json_schema.JsonSchema ] properties : dict [ str , brayns.core.api.json_schema.JsonSchema ] read_only : bool = False required : list [ str ] title : str = '' type : JsonType = 'undefined' write_only : bool = False JsonType class JsonType ( value ) Bases: Enum Enumeration of available JSON types. The value is the string from the JSON schema standard. Parameters : UNDEFINED \u2013 Any type is allowed. NULL \u2013 No types are allowed. BOOLEAN \u2013 Boolean. INTEGER \u2013 Integral number. NUMBER \u2013 Any number. STRING \u2013 String. ARRAY \u2013 Array. OBJECT \u2013 Object. ARRAY = 'array' BOOLEAN = 'boolean' INTEGER = 'integer' NULL = 'null' NUMBER = 'number' OBJECT = 'object' STRING = 'string' UNDEFINED = 'undefined' KeyFrame class KeyFrame ( index : int , view : Optional [ View ] = None ) Bases: object Key frame to hold a simulation frame and a camera view. Parameters : index ( int ) \u2013 Simulation frame index. view ( View | None , optional ) \u2013 Camera view, defaults to None. static from_indices ( indices : list [ int ] , view : Optional [ View ] = None ) \u2192 list [ brayns.core.snapshot.key_frame.KeyFrame ] Generate key frames with a fixed camera view. Parameters : indices ( list [ int ] ) \u2013 Frame indices. view ( View | None , optional ) \u2013 Camera view, defaults to None Returns : Key frames. Return type : list[ KeyFrame ] index : int view : brayns.utils.view.view.View | None = None Light class Light ( color : Color3 = Color3(r=1.0, g=1.0, b=1.0) , intensity : float = 1.0 , visible : bool = True ) Bases: ABC Base class for all light types. Parameters : color ( Color3 , optional ) \u2013 Light color, defaults to white. intensity ( float , optional ) \u2013 Light intensity, defaults to 1. visible ( bool , optional ) \u2013 Make the light visible or not, defaults to True. color : Color3 = Color3(r=1.0, g=1.0, b=1.0) abstract get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. intensity : float = 1.0 abstract class property name : str Get the light name. Returns : Light name. Return type : str visible : bool = True Loader class Loader Bases: ABC Base class for all loaders. Loader are used to load models from files into an instance. Available loaders for a given instance depends on the loaded plugins. The list of available loaders and supported extensions for a given instance can be queried using get_loaders(instance) . abstract get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. load ( instance : Instance , path : str ) \u2192 list [ brayns.core.model.model.Model ] Load the given file into an instance and return the models. Parameters : instance ( Instance ) \u2013 Instance. path ( str ) \u2013 Model(s) file path. Returns : List of created models. Return type : list[ Model ] load_binary ( instance : Instance , format : str , data : bytes ) \u2192 list [ brayns.core.model.model.Model ] Load a model from binary data. As the model format cannot be deduced from a path, it must be specified. Parameters : instance ( Instance ) \u2013 Instance. format ( str ) \u2013 Model format (see loader class variables). data ( bytes ) \u2013 Model binary data. Returns : List of created models. Return type : list[ Model ] abstract class property name : str Get the loader name. Can be compared with LoaderInfo.name . Returns : Loader name. Return type : str LoaderInfo class LoaderInfo ( name : str , extensions : list [ str ] , schema : JsonSchema ) Bases: object Loader description. Parameters : name ( str ) \u2013 Loader name. extensions ( list [ str ] ) \u2013 Supported extensions without the dot. schema ( JsonSchema ) \u2013 Parameters JSON schema (low level). extensions : list [ str ] name : str schema : JsonSchema Material class Material Bases: ABC Base class for all material types. Material are applied on model to change their aspect (but not their color). classmethod from_properties ( message : dict [ str , Any ] ) \u2192 T Low level API to deserialize from JSON. abstract get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. abstract class property name : str Get the material name. Returns : Material name Return type : str abstract update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. MatteMaterial class MatteMaterial ( opacity : float = 1.0 ) Bases: Material Matte material. Parameters : opacity ( float , optional ) \u2013 Opacity (0-1), defaults to fully opaque. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str opacity : float = 1.0 update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. MeshLoader class MeshLoader Bases: Loader Mesh loader. Main supported formats are OBJ, PLY, STL and OFF. Format support can be queried using get_loaders(instance) . OBJ : str = 'obj' OFF : str = 'off' PLY : str = 'ply' STL : str = 'stl' get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the loader name. Returns : Loader name. Return type : str MetalMaterial class MetalMaterial ( roughness : float = 1.0 ) Bases: Material Metal material. Parameters : roughness ( float , optional ) \u2013 Roughness of the metal, defaults to 1. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str roughness : float = 1.0 update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. Model class Model ( id : int , bounds : Bounds , info : dict [ str , Any ] , visible : bool , transform : Transform ) Bases: object Loaded model. All models are loaded without transform (identity) but it doesn\u2019t mean that their center of mass is at the origin (depends on the source file). Model metadata are a str -> str map and depends on the model type. Parameters : id ( int ) \u2013 Model ID. bounds ( Bounds ) \u2013 Model bounding box. info ( dict [ str , Any ] ) \u2013 Intrinsic nodel information. visible ( bool ) \u2013 Check wether the model is rendered or not. transform ( Transform ) \u2013 Model transform relative to the origin. bounds : Bounds id : int info : dict [ str , Any ] transform : Transform visible : bool OpacityCurve class OpacityCurve ( control_points : list [ brayns.core.color_ramp.control_point.ControlPoint ] ) Bases: object Opacity curve to generate opacity from a list of color3. Use control points to map simulation value (usually voltage) to opacity. The simulation values are normalized so it is not necessary to know them. If no control points are set at 0 or 1, implicit control points [0, 0] and [1, 1] will be used for the computations. Otherwise the user-defined ones are used. Parameters : control_points ( list [ ControlPoint ] ) \u2013 Control points of the curve. apply ( colors : list [ brayns.utils.color.color3.Color3 ] ) \u2192 list [ brayns.utils.color.color4.Color4 ] Create a from colors with opacities computed from the curve. Works also with a list of Color4 as lists are covariant in Python. Simulation normalized value range is inferred from len(colors). Parameters : colors ( list [ Color3 ] ) \u2013 Input colors. Returns : Output colors. Return type : list[ Color4 ] control_points : list [ brayns.core.color_ramp.control_point.ControlPoint ] OrthographicProjection class OrthographicProjection ( height : float = 0.0 ) Bases: Projection Orthographic camera projection. Orthographic camera makes all objects having the same size regardless their distance from the camera. The viewport width is computed using the aspect ratio of the current resolution of the instance (framebuffer size). Parameters : height ( float ) \u2013 Viewport height in world coordinates. get_front_view ( target : Bounds ) \u2192 View Helper method to get the front view of a target object. Distance from the object doesn\u2019t matter as long as no other objects are between the camera and the target. By default, the margin is half of the target depth. Parameters : target ( Bounds ) \u2013 Camera target. Returns : Front view to see the target entirely. Return type : View get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. height : float = 0.0 class property name : str Projection name. Returns : Projection name. Return type : str set_target ( target : Bounds ) \u2192 None Set camera height to target height. Parameters : target ( Bounds ) \u2013 Camera target. update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. PerspectiveProjection class PerspectiveProjection ( fovy: ~brayns.utils.view.fovy.Fovy = <brayns.utils.view.fovy.Fovy object> , aperture_radius: float = 0.0 , focus_distance: float = 1.0 ) Bases: Projection Perspective camera projection. Perspective projection use a field of view angle to compute the size of the objects depending on their distance from the camera. The field of view (fovy) can be used to compute full screen view of a given target object. Parameters : fovy ( Fovy ) \u2013 Field of view angle (45 degrees by default). aperture_radius ( float ) \u2013 Optional aperture radius. focus_distance ( float ) \u2013 Optional focus distance. aperture_radius : float = 0.0 focus_distance : float = 1.0 fovy : Fovy = <brayns.utils.view.fovy.Fovy object> get_front_view ( target : Bounds ) \u2192 View Use fovy to compute the front view. Parameters : target ( Bounds ) \u2013 Camera target. Returns : Front view based on self.fovy. Return type : View get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Camera name. Returns : Camera name. Return type : str set_target ( target : Bounds ) \u2192 None Does nothing. update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. Plane class Plane ( a : float , b : float , c : float , d : float = 0.0 ) Bases: Geometry Infinite plane. Described by the equation ax + by + cz + d = 0 . Where [a, b, c] is the normal of the plane and d the orthogonal distance from the origin. Parameters : a ( float ) \u2013 X term of the plane equation. b ( float ) \u2013 Y term of the plane equation. c ( float ) \u2013 Y term of the plane equation. d ( float ) \u2013 Scalar term of the plane equation. a : float b : float c : float d : float = 0.0 get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property method : str JSON-RPC method to add planes. Returns : JSON-RPC method. Return type : str PlasticMaterial class PlasticMaterial ( opacity : float = 1.0 ) Bases: Material Plastic material. Parameters : opacity ( float , optional ) \u2013 Opacity (0-1), defaults to fully opaque. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the material name. Returns : Material name Return type : str opacity : float = 1.0 update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. ProductionRenderer class ProductionRenderer ( samples_per_pixel : int = 128 , max_ray_bounces : int = 7 , background_color : Color4 = Color4(r=0.004, g=0.016, b=0.102, a=0.0) ) Bases: Renderer Production renderer for expensive quality rendering. Overrides default parameters for higher quality. Parameters : samples_per_pixel ( int , optional. ) \u2013 Accumulation, defaults to 128. max_ray_bounces ( int , optional. ) \u2013 Ray bounces, defaults to 7. get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. max_ray_bounces : int = 7 class property name : str Get renderer name. Returns : Renderer name. Return type : str samples_per_pixel : int = 128 update_additional_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. Projection class Projection Bases: ABC Base class of all supported camera projections (plugin dependent). All camera projections defined in the package inherit from this class. Projections can be identified using a unique name (ex: \u2018perspective\u2019). classmethod from_properties ( message : dict [ str , Any ] ) \u2192 T Low level API to deserialize from JSON. abstract get_front_view ( target : Bounds ) \u2192 View Compute the front view to focus on given target. Parameters : target ( Bounds ) \u2013 Camera target. Returns : Front view to see the target entirely. Return type : View abstract get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. get_properties_with_name ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. abstract class property name : str Name of the projection to identify it. Returns : Camera name. Return type : str abstract set_target ( target : Bounds ) \u2192 None Update the projection parameters to focus on given target. Parameters : target ( Bounds ) \u2013 Camera target. abstract update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. QuadLight class QuadLight ( color : Color3 = Color3(r=1.0, g=1.0, b=1.0) , intensity : float = 1.0 , visible : bool = True , bottom_left : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) , edge1 : Vector3 = Vector3(x=1.0, y=0.0, z=0.0) , edge2 : Vector3 = Vector3(x=0.0, y=1.0, z=0.0) ) Bases: Light Rectangular light. Emission direction is the positive side (see emission_direction). Parameters : bottom_left ( Vector3 ) \u2013 Bottom left corner, defaults to origin. edge1 ( Vector3 , optional ) \u2013 First edge, defaults to +X. edge2 ( Vector3 , optional ) \u2013 Second edge, defaults to +Y. bottom_left : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) edge1 : Vector3 = Vector3(x=1.0, y=0.0, z=0.0) edge2 : Vector3 = Vector3(x=0.0, y=1.0, z=0.0) property emission_direction : Vector3 Get the emission direction of the light. Equal to edge1 x edge2 normalized. Returns : Emission direction. Return type : Vector3 get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Return light name. Returns : Light name. Return type : str Renderer class Renderer ( samples_per_pixel : int = 1 , max_ray_bounces : int = 3 , background_color : Color4 = Color4(r=0.004, g=0.016, b=0.102, a=0.0) ) Bases: ABC Base class for all renderer types. Accumulation reduce the aliasing but increase the computation time. Ray bounces allow non-emissive objects to light other objects. Parameters : samples_per_pixel ( int , optional. ) \u2013 Accumulation, defaults to 1. max_ray_bounces ( int , optional. ) \u2013 Ray bounces, defaults to 3. background_color ( Color4 , optional. ) \u2013 Background color, defaults to BBP transparent. background_color : Color4 = Color4(r=0.004, g=0.016, b=0.102, a=0.0) classmethod from_properties ( message : dict [ str , Any ] ) \u2192 T Low level API to deserialize from JSON. abstract get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. get_properties_with_name ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. max_ray_bounces : int = 3 abstract class property name : str Get renderer name. Returns : Renderer name. Return type : str samples_per_pixel : int = 1 abstract update_additional_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. Scene class Scene ( bounds : Bounds , models : list [ brayns.core.model.model.Model ] ) Bases: object Contains all existing models and scene boundaries. Scene bounds take models and lights into account. Parameters : bounds ( Bounds ) \u2013 Global bounds. models ( list [ Model ] ) \u2013 List of all existing models. bounds : Bounds models : list [ brayns.core.model.model.Model ] Simulation class Simulation ( start_frame : int , end_frame : int , current_frame : int , delta_time : float , time_unit : TimeUnit ) Bases: object Simulation state. Parameters : start_frame ( int ) \u2013 Index of the first frame of the simulation. end_frame ( int ) \u2013 Index of the last frame of the simulation. current_frame ( int ) \u2013 Index of the current frame of the simulation. delta_time ( float ) \u2013 Delta time in time_unit between two frames. time_unit ( TimeUnit ) \u2013 Time unit, always milliseconds. clamp ( frame : int ) \u2192 int Clamp given frame index inside simulation limits. Parameters : frame ( int ) \u2013 Frame index. Returns : Clamped frame index. Return type : int current_frame : int delta_time : float property duration : float Simulation duration in time_unit . Returns : Duration. Return type : float end_frame : int property fps : float Simulation FPS. Returns : FPS. Return type : float property frame_count : int Number of frames in the simulation. Returns : Frame count. Return type : int get_frame ( time : float ) \u2192 int Convert timestamp in time_unit to frame index. Result is not clamped to simulation limits. Parameters : time ( float ) \u2013 Timestep in time_unit . Returns : Frame index. Return type : int get_time ( frame : int ) \u2192 float Convert frame index to a timestep in time_unit . Result is not clamped to simulation limits. Parameters : frame ( int ) \u2013 Frame index. Returns : Timestep in time_unit . Return type : float start_frame : int time_unit : TimeUnit Snapshot class Snapshot ( resolution : Optional [ Resolution ] = None , frame : Optional [ int ] = None , camera : Optional [ Camera ] = None , renderer : Optional [ Renderer ] = None , jpeg_quality : int = 100 ) Bases: object Snapshot to render a given frame. For None parameters, the current values of the instance are used. Note: snapshots create a temporary context in the instance to avoid overriding current instance settings. Therefore, for multiple snapshots, it is more efficient to use a FrameExporter . Parameters : resolution ( Resolution | None , optional ) \u2013 Image resolution, defaults to None. frame ( int | None , optional ) \u2013 Simulation index, defaults to None. camera ( Camera | None , optional ) \u2013 Camera used to render, defaults to None. renderer ( Renderer | None , optional ) \u2013 Renderer used to render, defaults to None. jpeg_quality ( int , optional ) \u2013 JPEG quality if format is JPEG, defaults to 100. camera : brayns.core.camera.camera.Camera | None = None download ( instance : Instance , format : ImageFormat = ImageFormat.PNG ) \u2192 bytes Download the rendered image as bytes at given format. Parameters : instance ( Instance ) \u2013 Instance. path ( str ) \u2013 Output file. frame : int | None = None jpeg_quality : int = 100 renderer : brayns.core.renderer.renderer.Renderer | None = None resolution : brayns.utils.image.resolution.Resolution | None = None save ( instance : Instance , path : str ) \u2192 None Download and save the snapshot locally under given file. Path is on the local machine (running current script). Parameters : instance ( Instance ) \u2013 Instance. path ( str ) \u2013 Output file. save_remotely ( instance : Instance , path : str ) \u2192 None Save the snapshot remotely under given file. Path is on the remote machine (running instance backend). Parameters : instance ( Instance ) \u2013 Instance. path ( str ) \u2013 Output file. Sphere class Sphere ( radius : float , center : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) ) Bases: Geometry Sphere with radius and position. Parameters : radius ( float ) \u2013 Radius. center ( Vector3 ) \u2013 Center XYZ, defaults to origin. center : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) get_additional_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property method : str JSON-RPC method to add spheres. Returns : JSON-RPC method. Return type : str radius : float TimeUnit class TimeUnit ( value ) Bases: Enum Simulation time unit. Simulation time is always in milliseconds but this class is here to avoid making this assumption. Parameters : MILLISECOND \u2013 milliseconds (\u2018ms\u2019). MILLISECOND = 'ms' property per_second : float Get the number of time unit per second. Returns : Time unit count in one second. Return type : float property seconds : float Convert the time unit to seconds. Returns : Time unit in seconds. Return type : float ValueRange class ValueRange ( min : float , max : float ) Bases: Vector Specify color ramp value range. Usually the simulation values are voltages but it can be anything. Parameters : min ( float ) \u2013 Minimal simulation value. max ( float ) \u2013 Maximal simulation value. max : float min : float normalize ( value : float ) \u2192 float Normalize given value between min and max. Result is not clamped between min and max. For example a value of 5 with min = 0 and max = 10 gives 0.5. Parameters : value ( float ) \u2013 Simulation value. Returns : Normalized simulation value. Return type : float property size : float Get the difference between min and max. Returns : Value range. Return type : float Version class Version ( major : int , minor : int , patch : int , revision : str ) Bases: object Instance version info. Parameters : major ( int ) \u2013 Major part. minor ( int ) \u2013 Minor part. patch ( int ) \u2013 Patch part. revision ( str ) \u2013 Commit hash. check ( local : str = '2.0.0' ) \u2192 None Check that self is compatible with local version. Parameters : local ( str , optional ) \u2013 API version, defaults to __version__ Raises : VersionError \u2013 Version mismatch. major : int minor : int patch : int property release : tuple [ int , int , int ] Return a tuple with major, minor and patch. Returns : Release tuple. Return type : tuple[int, int, int] revision : str property tag : str Format version tag \u2018major.minor.patch\u2019. Can be compared to package __version__. Returns : Version tag. Return type : str VersionError exception VersionError ( local : str , remote : str ) Bases: Error Error raised when a version mismatch occurs. Parameters : local ( str ) \u2013 Local (Python API) version. local \u2013 Remote (Binary) version. local : str remote : str Functions add_clipping_geometry add_clipping_geometry ( instance : Instance , geometry : ClippingGeometry ) \u2192 Model Add a clipping geometry to the given instance and return the model. Parameters : instance ( Instance ) \u2013 Instance. geometry ( ClippingGeometry ) \u2013 Clipping geometry to add. Returns : Clipping model. Return type : Model add_geometries add_geometries ( instance : Instance , geometries : list [ T ] ) \u2192 Model Create a model from a list of geometries. All geometries must have the same type. Model witout geometries are not supported. Parameters : instance ( Instance ) \u2013 Instance. geometries ( list [ T ] ) \u2013 Geometries to add (boxes, capsules, etc\u2026). Raises : ValueError \u2013 List is empty. Returns : Model created from the geometries. Return type : Model add_light add_light ( instance : Instance , light : Light ) \u2192 Model Add a given light to an instance and return the model. Parameters : instance ( Instance ) \u2013 Instance. light ( Light ) \u2013 Light to add. Returns : Light model. Return type : Model check_version check_version ( instance : Instance ) \u2192 None Check that the version of the instance is compatible with the API. Parameters : instance ( Instance ) \u2013 Instance to check. clear_clipping_geometries clear_clipping_geometries ( instance : Instance ) \u2192 None Clear all clipping geometries from the given instance. Parameters : instance ( Instance ) \u2013 Instance. clear_lights clear_lights ( instance : Instance ) \u2192 None Remove all lights from an instance. Parameters : instance ( Instance ) \u2013 Instance. clear_models clear_models ( instance : Instance ) \u2192 None Clear all models from the given instance. Parameters : instance ( Instance ) \u2013 Instance. enable_simulation enable_simulation ( instance : Instance , model_id : int , enabled : bool ) \u2192 None Enable the simulation coloring for the given model. If enabled, the colors of the model are the one of the simulation at the current frame (see get_simulation and set_simulation_frame ). If disabled, the colors of the model are set manually or by default. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Model ID. enabled ( bool ) \u2013 Simulation coloring enabled for given model. get_application get_application ( instance : Instance ) \u2192 Application Retreive the application parameters from an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Current application parameters. Return type : Application get_bounds get_bounds ( instance : Instance ) \u2192 Bounds Retreive the scene boundary of an instance. The scene boundaries are computed from all existing lights and models in the given instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Bounds of the current scene. Return type : Bounds get_camera get_camera ( instance : Instance , projection_type : type [ brayns.core.camera.projection.Projection ] ) \u2192 Camera Shortcut to retreive the current camera of an instance. Use get_camera_projection and get_camera_view. projection_type must be of the same type as the current projection. Parameters : instance ( Instance ) \u2013 Instance. projection_type ( type [ Projection ] ) \u2013 Current camera projection type of instance. Returns : Camera with current view and projection. Return type : Camera get_camera_name get_camera_name ( instance : Instance ) \u2192 str Retreive the name of the current camera of an instance. The returned name is the same as Camera.name and can be used to check if a given camera is the current one like this: Parameters : instance ( Instance ) \u2013 Instance. Returns : Current camera name. Return type : str get_camera_projection get_camera_projection ( instance : Instance , projection_type : type [ T ] ) \u2192 T Retreive the current camera projection from an instance. The provided projection type must be the same as the current one. Returned camera is of type camera_type . Parameters : instance ( Instance ) \u2013 Instance. camera_type ( type [ T ] ) \u2013 Camera type (ex: brayns.PerspectiveCamera). Returns : Current camera of instance . Return type : T get_camera_view get_camera_view ( instance : Instance ) \u2192 View Get the current camera view of an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Camera view. Return type : View get_color_ramp get_color_ramp ( instance : Instance , model_id : int ) \u2192 ColorRamp Retreive the color ramp of the given model. Model must have a color ramp attached (usually report loaded). Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Model ID. Returns : Color ramp. Return type : ColorRamp get_entrypoint get_entrypoint ( instance : Instance , method : str ) \u2192 Entrypoint Retreive an entrypoint using its name (JSON-RPC method). Parameters : instance ( Instance ) \u2013 Instance to query the entrypoint. method ( str ) \u2013 JSON-RPC method name. Returns : Deserialized entrypoint. Return type : Entrypoint get_entrypoints get_entrypoints ( instance : Instance ) \u2192 list [ brayns.core.api.entrypoint.Entrypoint ] Retreive all available entrypoints from an instance. Parameters : instance ( Instance ) \u2013 Instance to query the entrypoints. Returns : List of available entrypoints (depends on plugins loaded). Return type : list[ Entrypoint ] get_loaders get_loaders ( instance : Instance ) \u2192 list [ brayns.core.loader.loader_info.LoaderInfo ] Retreive all available loaders from an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : List of loader descriptions. Return type : list[ LoaderInfo ] get_material get_material ( instance : Instance , model_id : int , material_type : type [ T ] ) \u2192 T Get the material applied on the given model. material_type must be the current model material type. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 ID of the model. material_type ( type [ T ] ) \u2013 Material type. Returns : Material applied on model . Return type : T get_material_name get_material_name ( instance : Instance , model_id : int ) \u2192 str Get the name of the material applied on the given model. Can be used to check that a given material is applied on a model: Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 ID of the model to check. Returns : Material name. Return type : str get_methods get_methods ( instance : Instance ) \u2192 list [ str ] Retreive all JSON-RPC methods from an instance. Parameters : instance ( Instance ) \u2013 Instance to query the methods. Returns : List of available methods (depends on plugins loaded). Return type : list[str] get_model get_model ( instance : Instance , id : int ) \u2192 Model Retreive the model with given ID from an instance. Parameters : instance ( Instance ) \u2013 Instance. id ( int ) \u2013 Model ID. Returns : Model object. Return type : Model get_models get_models ( instance : Instance ) \u2192 list [ brayns.core.model.model.Model ] Retreive all models from an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : List of models. Return type : list[ Model ] get_renderer get_renderer ( instance : Instance , renderer_type : type [ T ] ) \u2192 T Retreive the current renderer from an instance. Current renderer and given renderer type must be the same. Current renderer can be queried using get_rendere_name . Parameters : instance ( Instance ) \u2013 Instance. renderer_type ( type [ T ] ) \u2013 Type of the current renderer. Returns : Current renderer. Return type : T get_renderer_name get_renderer_name ( instance : Instance ) \u2192 str Retreive the name of the current renderer of an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Renderer name. Return type : str get_scene get_scene ( instance : Instance ) \u2192 Scene Retreive all models and the world boundaries from an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Models and global bounds. Return type : Scene get_simulation get_simulation ( instance : Instance ) \u2192 Simulation Retreive the current simulation state of an instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Current simulation state. Return type : Simulation get_version get_version ( instance : Instance ) \u2192 Version Retreive the version of a backend instance. Parameters : instance ( Instance ) \u2013 Instance. Returns : Version info. Return type : Version look_at look_at ( target : Bounds , projection : Optional [ Projection ] = None ) \u2192 Camera Shortcut to create a camera focusing on given target. See Camera.look_at for more details. Parameters : target ( Bounds ) \u2013 Camera target bounds. projection ( Projection | None , optional ) \u2013 Camera projection, defaults to PerspectiveProjection. Returns : Camera looking at target. Return type : Camera remove_models remove_models ( instance : Instance , ids : list [ int ] ) \u2192 None Remove the given models from an instance. Parameters : instance ( Instance ) \u2013 Instance. ids ( list [ int ] ) \u2013 ID(s) of the models to remove. set_camera set_camera ( instance : Instance , camera : Camera ) \u2192 None Shortcut to update the camera view and projection. Parameters : instance ( Instance ) \u2013 Instance. camera ( Camera ) \u2013 Current camera to use for instance. set_camera_projection set_camera_projection ( instance : Instance , camera : Projection ) \u2192 None Set the current camera of the given instance. Parameters : instance ( Instance ) \u2013 Instance. camera ( Camera ) \u2013 Current camera. set_camera_view set_camera_view ( instance : Instance , view : View ) \u2192 None Set the current camera view of an instance. Parameters : instance ( Instance ) \u2013 Instance. view ( View ) \u2013 New camera view. set_color_ramp set_color_ramp ( instance : Instance , model_id : int , ramp : ColorRamp ) \u2192 None Set the current color ramp of the given model. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Model ID. color_ramp ( ColorRamp ) \u2013 Color ramp. set_material set_material ( instance : Instance , model_id : int , material : Material ) \u2192 None Apply the given material to the given model. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Model ID. material ( Material ) \u2013 Material to apply on model. set_renderer set_renderer ( instance : Instance , renderer : Renderer ) \u2192 None Set the current renderer of an instance. Parameters : instance ( Instance ) \u2013 Instance. renderer ( Renderer ) \u2013 New renderer. set_simulation_frame set_simulation_frame ( instance : Instance , index : int ) \u2192 None Set the current simulation frame of an instance. Parameters : instance ( Instance ) \u2013 Instance. index ( int ) \u2013 Index of the current frame. update_application update_application ( instance : Instance , resolution : Optional [ Resolution ] = None , jpeg_quality : Optional [ int ] = None ) \u2192 None Update application parameters of the instance. None parameters are left to their current value. Parameters : instance ( Instance ) \u2013 Instance. resolution ( Resolution | None , optional ) \u2013 Streaming resolution, defaults to None jpeg_quality ( int | None , optional ) \u2013 JPEG stream quality (0-100), defaults to None update_model update_model ( instance : Instance , model_id : int , visible : Optional [ bool ] = None , transform : Optional [ Transform ] = None ) \u2192 Model Modify the properties of a given model and return its updated version. Parameters left as None will be remain to their current state. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 ID of the model to update. visible ( bool | None , optional ) \u2013 Model visibility, defaults to None transform ( Transform | None , optional ) \u2013 Model transformation, defaults to None Returns : Updated model. Return type : Model", "title": "core"}, {"location": "../pythonapi/movie.html", "text": "movie Movie generation subpackage. Important: requires an FFMPEG executable to work. It provides a wrapper around FFPMEG command line tool to generate movies from a list of already rendered images. To make a movie, frames must be rendered separately. This subpackage includes helpers to select the frames to render based on movie specifications. Classes Movie class Movie ( frames_folder : str , frames_format : ImageFormat , fps : float , resolution : Optional [ Resolution ] = None , bitrate : Optional [ int ] = None , encoder : Optional [ str ] = None , pixel_format : str | None = 'yuv420p' , ffmpeg_executable : str = 'ffmpeg' ) Bases: object Holds all the necessary information to generate a movie. Movies are generated using FFMPEG executable, this class only generates the command line. Customm FFMPEG executable can be specified if not in PATH. Encoder settings are chosen by FFMPEG if not specified except for pixel format which is chosen for maximum compatibility with players. The movie frames must be rendered separately and be in the same folder with the same extension (other are ignored). All the frames selected are used to generate the movie so its duration will be frame_count / FPS. Parameters : frames_folder ( str ) \u2013 Path of the folder with movie frames. frames_format ( ImageFormat ) \u2013 Format of the frames in folder. fps ( float ) \u2013 Movie FPS, should be the same as for export. resolution ( Resolution | None , optional ) \u2013 Movie resolution, defaults to frames resolution. bitrate ( int | None , optional ) \u2013 Encoding bitrate, defaults to FFMPEG choice. encoder ( str | None , optional ) \u2013 Encoder name, defaults to deduced from output file. pixel_format ( str | None , optional ) \u2013 Pixel format name, defaults to \u2018yuv420p\u2019. ffmpeg_executable ( str , optional ) \u2013 FFMPEG executable path, defaults to \u2018ffmpeg\u2019. bitrate : int | None = None encoder : str | None = None ffmpeg_executable : str = 'ffmpeg' fps : float frames_folder : str frames_format : ImageFormat get_command_line ( path : str ) \u2192 list [ str ] Generate FFMPEG command line from members and given path. Parameters : path ( str ) \u2013 Path to save the movie. Returns : FFMPEG command line. Return type : list[str] pixel_format : str | None = 'yuv420p' resolution : brayns.utils.image.resolution.Resolution | None = None save ( path : str ) \u2192 str Save the movie under the given path. Simply run get_command_line(path). Parameters : path ( str ) \u2013 Movie output path. Returns : FFMPEG logs for debugging. Return type : str MovieError exception MovieError ( reason : str , code : int = 0 , logs : str = '' ) Bases: Error Exception raised if an error occurs when making a movie. Parameters : reason ( str ) \u2013 Description of what happened. code ( int ) \u2013 Error code (FFMPEG output code). logs ( str ) \u2013 FFMPEG logs if any. code : int = 0 logs : str = '' reason : str MovieFrames class MovieFrames ( fps : float = 25.0 , slowing_factor : float = 1.0 , start_frame : int = 0 , end_frame : int = -1 ) Bases: object Helper class to generate frame indices. Use the movie specification (FPS, slow motion, frame range) to generate the indices of the simulation frames which needs to be rendered. Slowing factor is compared to real time (2 = twice slower). Start and end frames are clamped to the simulation limits and are threated like Python indices (i.e. -1 is simulation.end_frame). The index step is computed as simulation_fps / fps / slowing_factor. If it is smaller than 1, then some frames will be duplicated to match the target FPS. Parameters : fps ( float ) \u2013 Movie FPS. slowing_factor ( float ) \u2013 Slowing factor. start_frame ( int ) \u2013 First frame of the movie. end_frame ( int ) \u2013 Last frame of the movie. end_frame : int = -1 fps : float = 25.0 get_indices ( simulation : Simulation ) \u2192 list [ int ] slowing_factor : float = 1.0 start_frame : int = 0 Functions None", "title": "movie"}, {"location": "../pythonapi/network.html", "text": "network Subpackage to connect to a Brayns service instance (backend). An instance is a wrapper around a websocket connection and a JSON-RPC context. It provides functionalities to send JSON-RPC requests and receive replies with a Brayns instance. Classes ConnectionClosedError exception ConnectionClosedError ( reason : str ) Bases: WebSocketError Raised when doing operation on a disconnected instance. Happens after the connection to an instance. Connector class Connector ( uri: str, ssl_context: ~typing.Optional[~brayns.network.websocket.ssl_client_context.SslClientContext] = None, binary_handler: ~collections.abc.Callable[[bytes], None] = <function Connector.<lambda>>, logger: ~logging.Logger = <factory>, max_attempts: int | None = 1, attempt_period: float = 0.1 ) Bases: object Used to connect to a braynsService instance. A connector must at least have the URI the braynsService instance was started with. URI is always in format host:port, wss:// or ws:// will be added depending if an SSL context is provided (SSL is disabled if context is None). SSL context can be provided for a secure connection. If the instance uses a certificate signed by a CA installed on the local machine, the default value of brayns.SslClientContext() can be used. Otherwise, the CA file or path must be provided in the SSL context constructor. Binary messages received from the instance are not JSON-RPC requests but can be handled using an optional callback (see binary_handler ). If you don\u2019t know when your instance of braynsService will be ready when you call connect(), you can set max_attempts to None to try to connect in loop until it works (or with a maximum count and a delay to have a timeout). Parameters : uri ( str ) \u2013 Instance URI with format \u2018host:port\u2019. ssl_context ( SslClientContext | None , optional ) \u2013 SSL context if secure, defaults to None. binary_handler ( Callable [ [ bytes ] , None ] , optional ) \u2013 Callback for binary, defaults to (bytes) -> None. logger ( logging.Logger , optional ) \u2013 Instance logger, defaults to brayns.Logger(). max_attempts ( int | None , optional ) \u2013 Max connection attempts, defaults to 1. attempt_period ( float , optional ) \u2013 Delay in seconds between attempts, defaults to 0.1. attempt_period : float = 0.1 binary_handler ( ) connect ( ) \u2192 Instance Connect to instance and return it. Try to connect max_attempts times waiting attempt_period between two attempts. If it fails, ServiceUnavailableError will be raised. :raises WebSocketError :return: Connected braynsService instance. :rtype: Instance logger : Logger max_attempts : int | None = 1 ssl_context : brayns.network.websocket.ssl_client_context.SslClientContext | None = None uri : str Instance class Instance ( * args , ** kwargs ) Bases: Protocol Protocol used to interact with a connected instance of the backend. Contains the connection state with a backend instance and provide methods to interact with it. An instance is a running process of braynsService executable that runs a websocket server and performs the rendering tasks. The backend instance can be running on the local machine or a remote one. Once finished using an instance, user must call disconnect() on it or use its context manager to do it automatically when it goes out of scope. The recommended way of doing this is the context manager because it is safe regarding exceptions (ie with instance: \u2026). If a websocket communication error occurs, a WebSocketError is raised. If a JSON-RPC error message is replied, a RequestError is raised. For non-blocking requests, the future is iterable and yield RequestProgess objects. Call wait_for_result() to wait for the result. cancel ( id : int | str ) \u2192 None Cancel request with given ID. Send a cancellation request to the instance for a given task. Parameters : id ( int | str ) \u2013 JSON-RPC request ID. Raises : RequestError \u2013 Task is not running. property connected : bool Check if the instance is connected. Returns : Connection state. Return type : bool disconnect ( ) \u2192 None Disconnect instance (mandatory). is_running ( id : int | str ) \u2192 bool Check if the request with the given ID is running. Parameters : id ( int | str ) \u2013 JSON-RPC request ID. Returns : Running state. Return type : bool poll ( block : bool = True ) \u2192 None Check if messages are received from the instance. When a message is received, it will update all existing futures. The futures call this method in blocking mode when iterated. Parameters : block ( bool , optional ) \u2013 Wait until a message is received, defaults to True request ( method : str , params : Optional [ Any ] = None , binary : bytes = b'' ) \u2192 Any Send a request to the instance and wait for the result. Generate automatically the JSON-RPC ID using integers. Parameters : method ( str ) \u2013 JSON-RPC method (entrypoint name). params ( Any , optional ) \u2013 JSON-RPC params, defaults to None Returns : JSON-RPC result. Return type : unknown send ( request : Request ) \u2192 RequestFuture Send a request in a non blocking way. This method is the most basic one, it doesn\u2019t generate any ID and can be used asynchronously (doesn\u2019t block until result is received). Parameters : request ( Request ) \u2013 Request. Returns : Future object to monitor the request. Return type : RequestFuture task ( method : str , params : Optional [ Any ] = None , binary : bytes = b'' ) \u2192 RequestFuture Send a request to the instance in a non-blocking way. Generate automatically the JSON-RPC ID using integers. Use the future returned to wait for progresses or results. Parameters : method ( str ) \u2013 JSON-RPC method. params ( Any , optional ) \u2013 JSON-RPC params, defaults to None Returns : Future object to monitor the request. Return type : RequestFuture InvalidServerCertificateError exception InvalidServerCertificateError ( reason : str ) Bases: WebSocketError Raised when the server certificate is rejected by the client. SSL specific error happening during the connection to an instance. Logger class Logger ( level : int = 30 ) Bases: Logger Brayns default logger. Log to stdout with simple formatting (name, level, message). Can be used to change only the log level without creating a new logger. Parameters : level ( int , optional ) \u2013 Log level from logging module, defaults to WARN. Initialize the logger with a name and an optional level. ProtocolError exception ProtocolError ( reason : str ) Bases: WebSocketError Raised when a websocket protocol error occurs. Usually happens during the connection to an instance. Request class Request ( id : int | str | None , method : str , params : unknown = None , binary : bytes = b'' ) Bases: JsonRpcRequest Request to send to a running instance of brayns service. Parameters : id ( int | str | None ) \u2013 Request ID to monitor the request. No replies will be received if set to None. method ( str ) \u2013 JSON-RPC method. params ( Any , optional ) \u2013 Request parameters (usually objects). binary : bytes = b'' RequestError exception RequestError ( code : int , message : str , data : Optional [ Any ] = None ) Bases: Error Error raised by an instance when a request fails. Parameters : code ( int ) \u2013 Error code. message ( str ) \u2013 Error description. data ( Any , optional ) \u2013 Optional additional error information. code : int data : unknown = None message : str RequestFuture class RequestFuture ( task : JsonRpcTask , cancel : Callable [ [ ] , None ] , poll : Callable [ [ ] , None ] ) Bases: object Future used to monitor a running request. Can be iterated to yield RequestProgress if the request send any. Use wait_for_result to block until the request is over. Use poll to refresh the state of the request. Use cancel to send a message to cancel the request. Future ready and progress state can also be queried. cancel ( ) \u2192 None static from_result ( result : unknown ) \u2192 RequestFuture get_progress ( ) \u2192 RequestProgress has_progress ( ) \u2192 bool is_ready ( ) \u2192 bool poll ( ) \u2192 None wait_for_result ( ) \u2192 Any RequestProgress class RequestProgress ( operation : str , amount : float ) Bases: object Request progress info. Parameters : operation ( str ) \u2013 Description of the current task. amount ( float ) \u2013 Progress amount [0-1]. amount : float operation : str ServiceUnavailableError exception ServiceUnavailableError ( reason : str ) Bases: WebSocketError Raised when braynsService instance is not available at given URI. Occurs when the backend instance is not ready or started. Can be used to try multiple connections to wait for an instance to be ready. SslClientContext class SslClientContext ( cafile : 'str | None' = None , capath : 'str | None' = None , cadata : 'str | None' = None ) Bases: object cadata : str | None = None cafile : str | None = None capath : str | None = None WebSocketError exception WebSocketError ( reason : str ) Bases: Error Base class of all network exceptions. Parameters : reason ( str ) \u2013 Short description of what happened. reason : str Functions None", "title": "network"}, {"location": "../pythonapi/plugins.html", "text": "plugins Plugins subpackage. It includes all science related features and optional components. Main functionalities are BBP circuit loading support, circuit coloring, raw morphologies loading, SONATA circuits and OpenDeck cylindrical camera. Classes BbpCells class BbpCells ( density : Optional [ float ] = None , targets : Optional [ list [ str ] ] = None , gids : Optional [ list [ int ] ] = None ) Bases: object BlueConfig cells selection. Use one of the factory methods to create this object. static all ( ) \u2192 BbpCells Select all cells from a circuit. density : float | None = None static from_density ( density : float ) \u2192 BbpCells Select only a proportion of cells (0 = None, 1 = all). static from_gids ( gids : list [ int ] ) \u2192 BbpCells Select cells using their GIDs. static from_targets ( targets : list [ str ] , density : float = 1.0 ) \u2192 BbpCells Select only the cells from a given target. The density of cells to load per target can also be specified. gids : list [ int ] | None = None targets : list [ str ] | None = None BbpLoader class BbpLoader ( cells: ~brayns.plugins.bbp.bbp_cells.BbpCells = <factory> , report: ~typing.Optional[~brayns.plugins.bbp.bbp_report.BbpReport] = None , morphology: ~brayns.plugins.morphology.morphology.Morphology = <factory> , load_afferent_synapses: bool = False , load_efferent_synapses: bool = False ) Bases: Loader BlueConfig / CircuitConfig loader. Use this loader to load circuit files with BBP internal format. Parameters : cells ( BbpCells , optional ) \u2013 Cells to load, defaults to all. report ( BbpReport | None , optional ) \u2013 Report to load, defaults to None. morphology ( Morphology , optional ) \u2013 Specifies how to load the circuit morphologies. load_afferent_synapses ( bool , optional ) \u2013 Wether to load afferent, defaults to False. load_efferent_synapses ( bool , optional ) \u2013 Wether to load efferent, defaults to False. BLUE_CONFIG : ClassVar [ str ] = 'BlueConfig' CIRCUIT_CONFIG : ClassVar [ str ] = 'CircuitConfig' cells : BbpCells get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. load_afferent_synapses : bool = False load_efferent_synapses : bool = False morphology : Morphology class property name : str Get the loader name. Can be compared with LoaderInfo.name . Returns : Loader name. Return type : str report : brayns.plugins.bbp.bbp_report.BbpReport | None = None BbpReport class BbpReport ( type : BbpReportType , name : Optional [ str ] = None , spike_transition_time : Optional [ float ] = None ) Bases: object BlueConfig report selection. Use one of the factory methods to create this object. static compartment ( name : str ) \u2192 BbpReport Compartment report with given name. name : str | None = None static none ( ) \u2192 BbpReport No reports to load. spike_transition_time : float | None = None static spikes ( spike_transition_time : float = 1.0 ) \u2192 BbpReport Spike report with optional transition time. time unit of transition depends on the report but it can be used to make this transition faster or slower (ie 2 = twice slower). type : BbpReportType BbpReportType class BbpReportType ( value ) Bases: Enum All available BBP report types. COMPARTMENT = 'compartment' NONE = 'none' SPIKES = 'spikes' CellId class CellId ( value : str ) Bases: object Compressed list of cell IDs into a string. Use one of the factory methods to create this object. static from_integer ( value : int ) \u2192 CellId Create from a GID integer value. static from_integers ( values : Iterable [ int ] ) \u2192 CellId Create from a list of GIDs value. static from_range ( start : int , end : int ) \u2192 CellId Create from a range of GIDs. static from_strings ( values : Iterable [ str ] ) \u2192 CellId Create from a list of formatted strings. value : str ColorMethod class ColorMethod ( value ) Bases: Enum Methods to color a circuit. Not all methods are available for all circuits, see get_color_methods . ETYPE = 'etype' HEMISPHERE = 'hemisphere' LAYER = 'layer' MORPHOLOGY = 'morphology' MORPHOLOGY_CLASS = 'morphology class' MORPHOLOGY_SECTION = 'morphology section' MTYPE = 'mtype' REGION = 'region' SYNAPSE_CLASS = 'synapse class' CylindricProjection class CylindricProjection ( fovy: ~brayns.utils.view.fovy.Fovy = <brayns.utils.view.fovy.Fovy object> ) Bases: Projection Cylindric camera projection used to correct curved screen distorsion. Parameters : fovy ( Fovy , optional ) \u2013 Field of view, defaults to OpenDeck one. OPENDECK_FOVY : ClassVar [ Fovy ] = <brayns.utils.view.fovy.Fovy object> fovy : Fovy = <brayns.utils.view.fovy.Fovy object> get_front_view ( target : Bounds ) \u2192 View Use fovy to compute the front view. Parameters : target ( Bounds ) \u2013 Camera target. Returns : Front view based on self.fovy. Return type : View get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get projection name. Returns : Projection name. Return type : str set_target ( target : Bounds ) \u2192 None Does nothing. update_properties ( message : dict [ str , Any ] ) \u2192 None Low level API to deserialize from JSON. GeometryType class GeometryType ( value ) Bases: Enum Type of geometry to use when loading a morphology. Parameters : ORIGINAL \u2013 Use raw geometries dimensions. SMOOTH \u2013 Smooth radius changes between geometries for better visual. SECTION_SMOOTH \u2013 Smooth radius change between whole sections. CONSTANT_RADII \u2013 Apply the same radius to all geometries. CONSTANT_RADII = 'constant_radii' ORIGINAL = 'original' SECTION_SMOOTH = 'section_smooth' SMOOTH = 'smooth' Morphology class Morphology ( radius_multiplier : float = 1.0 , load_soma : bool = True , load_axon : bool = False , load_dendrites : bool = False , geometry_type : GeometryType = GeometryType.SMOOTH ) Bases: object Describe how to load a morphology. Parameters : radius_multiplier ( float , optional ) \u2013 Radius scaling, defaults to 1. load_soma ( bool , optional ) \u2013 Wether to load somas, defaults to True. load_axon ( bool , optional ) \u2013 Wether to load axons, defaults to False. load_dendrites ( bool , optional ) \u2013 Wether to load dendrites, defaults to False. geometry_type ( GeometryType , optional ) \u2013 How to load geometries, defaults to smooth. geometry_type : GeometryType = 'smooth' load_axon : bool = False load_dendrites : bool = False load_soma : bool = True radius_multiplier : float = 1.0 MorphologyLoader class MorphologyLoader ( morphology: ~brayns.plugins.morphology.morphology.Morphology = <factory> ) Bases: Loader Loader for morphology files. Parameters : morphology ( Morphology , optional ) \u2013 How to load the morphologies, default constructed. ASC : ClassVar [ str ] = 'asc' H5 : ClassVar [ str ] = 'h5' SWC : ClassVar [ str ] = 'swc' get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. morphology : Morphology class property name : str Get the loader name. Can be compared with LoaderInfo.name . Returns : Loader name. Return type : str SonataEdgePopulation class SonataEdgePopulation ( name : str , afferent : bool , density : float = 1.0 , radius : float = 2.0 , report : Optional [ str ] = None ) Bases: object SONATA edge population parameters. Parameters : name ( str ) \u2013 Population name. afferent ( bool ) \u2013 If these edges are afferent or efferent ones. afferent \u2013 If these edges are afferent ones. density ( float , optional ) \u2013 Proportion of edges to load, defaults to 1. radius ( float , optional ) \u2013 Edge radii, defaults to 2. report ( str | None , optional ) \u2013 Report name, defaults to None. afferent : bool density : float = 1.0 name : str radius : float = 2.0 report : str | None = None SonataLoader class SonataLoader ( node_populations : list [ brayns.plugins.sonata.sonata_node_population.SonataNodePopulation ] , simulation_config : Optional [ str ] = None ) Bases: Loader Loader for SONATA circuit files. Parameters : node_populations ( list [ SonataNodePopulation ] ) \u2013 Nodes to load. simulation_config ( str | None ) \u2013 Override configuration file, defaults to None. JSON : ClassVar [ str ] = 'json' get_properties ( ) \u2192 dict [ str , Any ] Low level API to serialize to JSON. class property name : str Get the loader name. Can be compared with LoaderInfo.name . Returns : Loader name. Return type : str node_populations : list [ brayns.plugins.sonata.sonata_node_population.SonataNodePopulation ] simulation_config : str | None = None SonataNodePopulation class SonataNodePopulation ( name: str , nodes: ~brayns.plugins.sonata.sonata_nodes.SonataNodes = <factory> , report: ~typing.Optional[~brayns.plugins.sonata.sonata_report.SonataReport] = None , edges: ~typing.Optional[list[brayns.plugins.sonata.sonata_edge_population.SonataEdgePopulation]] = None , morphology: ~brayns.plugins.morphology.morphology.Morphology = <factory> , vasculature_radius_multiplier: float = 1.0 ) Bases: object SONATA node population parameters. Parameters : name ( str ) \u2013 Population name. nodes ( SonataNodes , optional ) \u2013 Nodes to load, defaults to 0.01% of all nodes. report ( SonataReport | None , optional ) \u2013 Report to load, defaults to None. edges ( list [ SonataEdgePopulation ] | None , optional ) \u2013 Edges to load, defaults to None. morphology ( Morphology , optional ) \u2013 How to load the morphologies, default constructed. vasculature_radius_multiplier ( float , optional ) \u2013 Vasculature scale, defaults to 1. edges : list [ brayns.plugins.sonata.sonata_edge_population.SonataEdgePopulation ] | None = None morphology : Morphology name : str nodes : SonataNodes report : brayns.plugins.sonata.sonata_report.SonataReport | None = None vasculature_radius_multiplier : float = 1.0 SonataNodes class SonataNodes ( density : Optional [ float ] = None , names : Optional [ list [ str ] ] = None , ids : Optional [ list [ int ] ] = None ) Bases: object Specify how to load SONATA nodes. Use one of the factory methods to create this object. static all ( ) \u2192 SonataNodes Load all nodes. static default ( ) \u2192 SonataNodes Load a reasonable proportion of nodes. density : float | None = None static from_density ( density : float ) \u2192 SonataNodes Load a proportion of all nodes (0 = none, 1 = all). static from_ids ( ids : list [ int ] ) \u2192 SonataNodes Load nodes with given IDs. static from_names ( names : list [ str ] , density : float = 1.0 ) \u2192 SonataNodes Load from node group names with optional density. ids : list [ int ] | None = None names : list [ str ] | None = None SonataReport class SonataReport ( type : SonataReportType , name : Optional [ str ] = None , spike_transition_time : Optional [ float ] = None ) Bases: object Describe a SONATA report to load. Use one of the factory methods to create this object. static bloodflow_pressure ( name : str ) \u2192 SonataReport Bloodflow pressure report with given name. static bloodflow_radii ( name : str ) \u2192 SonataReport Bloodflow radii report with given name. static bloodflow_speed ( name : str ) \u2192 SonataReport Bloodflow speed report with given name. static compartment ( name : str ) \u2192 SonataReport Compartment report with given name. name : str | None = None static none ( ) \u2192 SonataReport No report to load. spike_transition_time : float | None = None static spikes ( spike_transition_time : float = 1.0 ) \u2192 SonataReport Spike report with transition time (units from report). static summation ( name : str ) \u2192 SonataReport Simulation report with given name. static synapse ( name : str ) \u2192 SonataReport Synapse report with given name. type : SonataReportType SonataReportType class SonataReportType ( value ) Bases: Enum All available SONATA report types. BLOODFLOW_PRESSURE = 'bloodflow_pressure' BLOODFLOW_RADII = 'bloodflow_radii' BLOODFLOW_SPEED = 'bloodflow_speed' COMPARTMENT = 'compartment' NONE = 'none' SPIKES = 'spikes' SUMMATION = 'summation' SYNAPSE = 'synapse' Functions color_circuit color_circuit ( instance : Instance , model_id : int , color : Color4 ) \u2192 None Color a circuit by the given color. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Circuit model ID. color ( Color4 ) \u2013 Circuit color. color_circuit_by_id color_circuit_by_id ( instance : Instance , model_id : int , colors : dict [ brayns.plugins.coloring.cell_id.CellId , brayns.utils.color.color4.Color4 ] ) \u2192 list [ int ] Color a circuit from a mapping cell ID -> Color. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Circuit model ID. colors ( dict [ CellId , Color4 ] ) \u2013 Color mappings Cells -> Color. Returns : List of GIDs that were not colored. Return type : list[int] color_circuit_by_method color_circuit_by_method ( instance : Instance , model_id : int , method : ColorMethod , colors : dict [ str , brayns.utils.color.color4.Color4 ] ) \u2192 None Color a circuit using a given coloring method. Use a mapping from method value (str) to color. Available methods and method values can be queried for a given model using get_color_methods and get_color_method_values . Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Circuit model ID. method ( ColorMethod ) \u2013 Coloring method. colors ( dict [ str , Color4 ] ) \u2013 Mapping method value -> Color. get_color_method_values get_color_method_values ( instance : Instance , model_id : int , method : ColorMethod ) \u2192 list [ str ] Get available values for a coloring method on the given circuit. For example get_color_method_values(ColorMethod.BY_LAYER) would give [\u20181\u2019, \u20182\u2019, \u20183\u2019] if the circuit has 3 layers. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Model ID. method ( ColorMethod ) \u2013 Coloring method. Returns : List of values available for given method. Return type : list[str] get_color_methods get_color_methods ( instance : Instance , model_id : int ) \u2192 list [ brayns.plugins.coloring.color_method.ColorMethod ] Get the available coloring methods for the given circuit. Parameters : instance ( Instance ) \u2013 Instance. model_id ( int ) \u2013 Circuit model ID. Returns : List of available coloring methods. Return type : list[ ColorMethod ]", "title": "plugins"}, {"location": "../pythonapi/service.html", "text": "service Subpackage start braynsService as a subprocess from Python. Provides mainly helpers to generate the command line. Classes LogLevel class LogLevel ( value ) Bases: Enum Server (braynsService backend) log level. CRITICAL = 'critical' DEBUG = 'debug' ERROR = 'error' INFO = 'info' OFF = 'off' TRACE = 'trace' WARN = 'warn' Manager class Manager ( process : Process , instance : Instance ) Bases: NamedTuple Wrapper to manage a Process connected to an Instance . Contains a process running braynService and an instance connected to it. Once done with this object, stop() must be called to disconnect the instance and kill the process, using the context manager or by hand. Parameters : process ( Process ) \u2013 Process running braynsService. instance ( Instance ) \u2013 Instance connected to process . Create new instance of Manager(process, instance) instance : Instance Alias for field number 1 process : Process Alias for field number 0 stop ( ) \u2192 None Disconnect the instance and kill the process. Plugin class Plugin ( value ) Bases: Enum All built-in plugins for braynsService. Plugins are loaded when the backend instance is started and cannot be changed afterward. The value is the name of the plugin dynamic library (.so). ATLAS_EXPLORER = 'braynsAtlasExplorer' CIRCUIT_EXPLORER = 'braynsCircuitExplorer' CYLINDRIC_CAMERA = 'braynsCylindricCamera' DTI = 'braynsDTI' class property all : list [ str ] Shortcut to get all the plugin names. Process class Process ( args : list [ str ] , env : dict [ str , str ] ) Bases: object Process running a braynsService backend. The process must be stopped using terminate() once done with it, otherwise it will run forever. Use context manager (ie with process: \u2026) to avoid mistakes. The last lines of the process logs can be retreived using logs . property alive : bool Check if the process is still running. property logs : str Get the last logs (stdout + stderr) from the process. stop ( ) \u2192 None Stop the backend service by terminating the process. Must be called through the context manager (i.e. \u2018with\u2019) or manually to avoid the process to run forever. Service class Service ( uri: str , ssl_context: ~typing.Optional[~brayns.service.ssl_server_context.SslServerContext] = None , log_level: ~brayns.service.log_level.LogLevel = LogLevel.WARN , plugins: list[str] = <factory> , executable: str = 'braynsService' , env: dict[str , str] = <factory> ) Bases: object Class used to start a braynsService subprocess. Use a braynsService executable to start a subprocess. By default it looks for a \u2018braynsService\u2019 binary in the PATH but it can be changed. URI is the websocket server URI (ip:port). Use 0.0.0.0 as wildcard to allow connections from any machine. SSL server settings can be specified using optional certificate, key, CA and password. The backend log level can also be specified using log_level . Custom environment variables can also be set for the subprocess, for example to override the PATH and load specific libraries. Parameters : uri ( str ) \u2013 Service URI with format \u2018host:port\u2019. ssl_context ( SslServerContext | None , optional ) \u2013 SSL context if secure, defaults to None. log_level ( LogLevel , optional ) \u2013 Process log level, defaults to LogLevel.WARN. plugins ( list [ str ] , optional ) \u2013 Plugins to load, defaults to all built-in plugins. executable ( str , optional ) \u2013 braynsService executable, defaults to \u2018braynService\u2019. env ( dict [ str , str ] , optional ) \u2013 Subprocess environment variables, default to empty. env : dict [ str , str ] executable : str = 'braynsService' get_command_line ( ) \u2192 list [ str ] Build the command line to start braynsService. Returns : Command line arguments. Return type : list[str] log_level : LogLevel = 'warn' plugins : list [ str ] ssl_context : brayns.service.ssl_server_context.SslServerContext | None = None start ( ) \u2192 Process Start a new process for a braynsService backend. Return the process which runs the service. Returns : Service process. Return type : Process uri : str SslServerContext class SslServerContext ( private_key_file : Optional [ str ] = None , private_key_passphrase : Optional [ str ] = None , certificate_file : Optional [ str ] = None , ca_location : Optional [ str ] = None ) Bases: object Server SSL context. Can be used to start a braynsService instance with SSL enabled. Optional parameters such as the server private key, certificate and trusted CAs can be specified here. ca_location : str | None = None certificate_file : str | None = None private_key_file : str | None = None private_key_passphrase : str | None = None Functions start start ( service : Service , connector : Connector ) \u2192 Manager Start a braynsService instance and connect to it. Returns the service process and the connected instance (see Manager ). Parameters : service ( Service ) \u2013 Service specifications. connector ( Connector ) \u2013 Connection specifications. Returns : Running process and connected instance. Return type : Manager", "title": "service"}, {"location": "../pythonapi/utils.html", "text": "utils Brayns utilities. This subpackage contains all functionalities that are commonly used inside and outside the main package and are not directly related to the Web API. It includes helpers for algebra, imaging or coloring and the base exception. Classes Bounds class Bounds ( min : Vector3 , max : Vector3 ) Bases: object 3D boundary in world coordinates. Parameters : min ( Vector3 ) \u2013 Minimum XYZ. max ( Vector3 ) \u2013 Maximum XYZ. property center : Vector3 Compute the center point of the bounds. Returns : 3D point of the center. Return type : Vector3 property depth : float Compute the depth of the bounds. Returns : size.z. Return type : float class property empty : Bounds Create empty bounds. Returns : Empty bounds in [0, 0, 0]. Return type : Bounds property height : float Compute the height of the bounds. Returns : size.y. Return type : float max : Vector3 min : Vector3 property size : Vector3 Compute the size of the bounds. Returns : Size XYZ (width, height, depth). Return type : Vector3 property width : float Compute the width of the bounds. Returns : size.x. Return type : float Color3 class Color3 ( r : float = 0.0 , g : float = 0.0 , b : float = 0.0 ) Bases: Vector [ float ] Color with RGB normalized components. Color3 are vectors and can be manipulated as such. Parameters : r ( float ) \u2013 Red component 0-1. g ( float ) \u2013 Green component 0-1. b ( float ) \u2013 Blue component 0-1. b : float = 0.0 class property bbp_background : T Create a color of the BBP standard background (~blue). Returns : BBP background color [0.004, 0.016, 0.102]. Return type : Color3 class property black : T Create a black color. Returns : Black color [0, 0, 0]. Return type : Color3 class property blue : T Create a blue color. Returns : blue color [0, 0, 1]. Return type : Color3 g : float = 0.0 class property green : T Create a green color. Returns : green color [0, 1, 0]. Return type : Color3 r : float = 0.0 class property red : T Create a red color. Returns : red color [1, 0, 0]. Return type : Color3 class property white : T Create a white color. Returns : White color [1, 1, 1]. Return type : Color3 Color4 class Color4 ( r : float = 0.0 , g : float = 0.0 , b : float = 0.0 , a : float = 1.0 ) Bases: Color3 Color with RGBA normalized components. Color4 are Color3 and can be manipulated as such but with alpha channel. Opaque is alpha = 1 and fully transparent is alpha = 0. Color3 standard colors, if used from Color4, will have an alpha of 1. Parameters : a ( float , optional ) \u2013 Alpha component, defaults to 1.0. a : float = 1.0 classmethod from_color3 ( color : Color3 , alpha : float = 1.0 ) \u2192 T Helper to build a Color4 from a Color3. Parameters : color ( Color3 ) \u2013 Color3 to convert. alpha ( float , optional ) \u2013 Alpha channel, defaults to 1.0 Returns : Color4 converted. Return type : Color4 property opaque : Color4 Create an identical color but with alpha = 1. Returns : Color but fully opaque. Return type : Color4 property transparent : Color4 Create an identical color but with alpha = 0. Returns : Color but fully transparent. Return type : Color4 property without_alpha : Color3 Helper class to create a Color3 from a Color4. Returns : Color3 converted. Return type : Color3 Error exception Error Bases: Exception Base class of all Brayns exceptions. Can be used to catch only brayns specific errors. Fovy class Fovy ( angle : float , degrees : bool = False ) Bases: object Field of view (angle) of a camera. Construct with angle. Parameters : angle ( float ) \u2013 Angle value. degrees ( bool , optional ) \u2013 True if angle is in degrees, defaults to False property degrees : float Get angle in degrees. Returns : Angle in degrees. Return type : float get_front_view ( target : Bounds ) \u2192 View Compute the front view to see the target in full screen. Parameters : target ( Bounds ) \u2013 Bounds of the target to look. Returns : Full screen view. Return type : View get_full_screen_distance ( height : float ) \u2192 float Compute the distance to see a target of given height entirely. Parameters : height ( float ) \u2013 Viewport height. Returns : Distance to have the given viewport height. Return type : float property radians : float Get angle in radians. Returns : Angle in radians. Return type : float ImageFormat class ImageFormat ( value ) Bases: Enum Enumeration of all supported image format. Values are the image format file extension without the dot. Parameters : JPEG \u2013 JPEG format, smaller but lose quality. PNG \u2013 PNG format, bigger but lossless. JPEG = 'jpg' PNG = 'png' Quaternion class Quaternion ( x : float = 0.0 , y : float = 0.0 , z : float = 0.0 , w : float = 1.0 ) Bases: Vector [ float ] Quaternion with XYZW components. Provides vector operations (componentwise) and quaternion special operators (multiplication, conjugate, etc). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. w ( float ) \u2013 W component. property angle_degrees : float property angle_radians : float property axis : Vector3 property conjugate : Quaternion class property identity : Quaternion Quaternion with XYZW components. Provides vector operations (componentwise) and quaternion special operators (multiplication, conjugate, etc). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. w ( float ) \u2013 W component. property inverse : Quaternion w : float = 1.0 x : float = 0.0 y : float = 0.0 z : float = 0.0 Resolution class Resolution ( width : int , height : int ) Bases: Vector [ int ] Image resolution. Resolution is a Vector of integers and can be handled as such. Parameters : width ( int ) \u2013 Image width in pixels. height ( int ) \u2013 Image height in pixels. class property full_hd : Resolution Create a full HD (1920x1080) resolution. Returns : Full HD resolution. Return type : Resolution height : int class property production : Resolution Create a production (15360x8640) resolution. Returns : Production resolution. Return type : Resolution class property ultra_hd : Resolution Create a 4K (3840x2160) resolution. Returns : Ultra HD resolution. Return type : Resolution width : int Rotation class Rotation ( quaternion : Quaternion ) Bases: object Arbitrary 3D rotation. Can be constructed from euler angles, quaternion or axis and angle. Can also be converted to such types. Quaternions are automatically normalized (otherwise it is not a rotation). Use normalized quaternion internally. Euler angles only support XYZ order. Serialize / deserialize methods are low level JSON API. Can be combined (a.combine(b) is rotation a and then b). Can be applied on a given point around a given center (origin by default). property angle_degrees : float property angle_radians : float apply ( value : Vector3 , center : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) ) \u2192 Vector3 property axis : Vector3 combine ( other : Rotation ) \u2192 Rotation property euler_degrees : Vector3 property euler_radians : Vector3 static from_axis_angle ( axis : Vector3 , angle : float , degrees : bool = False ) \u2192 Rotation static from_euler ( euler : Vector3 , degrees : bool = False ) \u2192 Rotation static from_quaternion ( quaternion : Quaternion ) \u2192 Rotation class property identity : Rotation Arbitrary 3D rotation. Can be constructed from euler angles, quaternion or axis and angle. Can also be converted to such types. Quaternions are automatically normalized (otherwise it is not a rotation). Use normalized quaternion internally. Euler angles only support XYZ order. Serialize / deserialize methods are low level JSON API. Can be combined (a.combine(b) is rotation a and then b). Can be applied on a given point around a given center (origin by default). property inverse : Rotation property quaternion : Quaternion Transform class Transform ( translation: ~brayns.utils.vector.vector3.Vector3 = Vector3(x=0.0 , y=0.0 , z=0.0) , rotation: ~brayns.utils.transform.rotation.Rotation = <brayns.utils.transform.rotation.Rotation object> , scale: ~brayns.utils.vector.vector3.Vector3 = Vector3(x=1.0 , y=1.0 , z=1.0) ) Bases: object 3D transformation. Used to move models in 3D space. It is equivalent to a TRS matrix multiplication. It means we first scale the point at the origin, then rotate around the same origin and finally we translate it to its position. Parameters : translation ( Vector3 , optional ) \u2013 Translation, defaults to zero. rotation ( Rotation , optional ) \u2013 Rotation, defaults to identity. scale ( Vector3 , optional ) \u2013 Scaling, defaults to one. class property identity : Transform Create an identity transform (doesn\u2019t do anything). Returns : Identity transform. Return type : Transform rotation : Rotation = <brayns.utils.transform.rotation.Rotation object> scale : Vector3 = Vector3(x=1.0, y=1.0, z=1.0) translation : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) Vector3 class Vector3 ( x : float = 0.0 , y : float = 0.0 , z : float = 0.0 ) Bases: Vector [ float ] 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. class property back : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. cross ( other : Vector3 ) \u2192 Vector3 dot ( other : Vector3 ) \u2192 float class property down : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. class property forward : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. static full ( value : float ) \u2192 Vector3 class property left : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. class property one : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. class property right : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. class property up : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. x : float = 0.0 y : float = 0.0 z : float = 0.0 class property zero : Vector3 3D vector with XYZ components. Provides scalar and dot product in addition to Vector operators. Also gives the basic space directions (up, down, front, etc\u2026). Parameters : x ( float ) \u2013 X component. y ( float ) \u2013 Y component. z ( float ) \u2013 Z component. View class View ( position : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) , target : Vector3 = Vector3(x=0.0, y=0.0, z=1.0) , up : Vector3 = Vector3(x=0.0, y=1.0, z=0.0) ) Bases: object Represent a viewpoint with position and target. Parameters : position ( Vector3 ) \u2013 Observation position. target ( Vector3 ) \u2013 Target position. up ( Vector3 , optional ) \u2013 Up vector, defaults to +Y (global up). property direction : Vector3 Get normalized view vector. Returns : View vector normalized. Return type : Vector3 property distance : float Get the distance between the observator and the target. Returns : View vector norm. Return type : float position : Vector3 = Vector3(x=0.0, y=0.0, z=0.0) rotate_around_target ( rotation : Rotation ) \u2192 None Rotate the observation position around the target. Rotate position around target and up around origin. Parameters : rotation ( Rotation ) \u2013 Observation point rotation. target : Vector3 = Vector3(x=0.0, y=0.0, z=1.0) up : Vector3 = Vector3(x=0.0, y=1.0, z=0.0) property vector : Vector3 Get view vector (target - position). Returns : View vector. Return type : Vector3 Functions lower_bound lower_bound ( values : list [ brayns.utils.vector.vector3.Vector3 ] ) \u2192 Vector3 Take the smallest value for each component and make a new vector. Example: lower_bound([1, -2, 3], [-1, 2, -3]) = [-1, -2, -3]. Return zero if values are empty. Parameters : values ( list [ Vector3 ] ) \u2013 Values to find the lower bound. Returns : Lowest value for each component among given values. Return type : Vector3 merge_bounds merge_bounds ( values : list [ brayns.utils.bounds.bounds.Bounds ] ) \u2192 Bounds Compute the union of all given bounds. Returns Bounds.empty if values are empty. Assume that all bounds are valid (ie min <= max for each component). Parameters : values ( list [ Bounds ] ) \u2013 Bounds to merge. Returns : Union of all bounds in values. Return type : Bounds parse_hex_color parse_hex_color ( value : str ) \u2192 Color3 Parse an hexadecimal color string to Color3. The string can be just digits (0a12f5), prefixed with a hash (#0a12f5) or with 0x (0x0a12f5). Parameters : value ( str ) \u2013 Color code. Returns : Color parsed. Return type : Color3 parse_image_format parse_image_format ( filename : str | pathlib.Path ) \u2192 ImageFormat Parse the image format from a file path using its extension. Supports both string and pathlib.Path input. Parameters : filename ( str | pathlib.Path ) \u2013 Image file path. Returns : Image format. Return type : ImageFormat upper_bound upper_bound ( values : list [ brayns.utils.vector.vector3.Vector3 ] ) \u2192 Vector3 Take the highest value for each component and make a new vector. Example: upper_bound([1, -2, 3], [-1, 2, -3]) = [1, 2, 3]. Return zero if values are empty. Parameters : values ( list [ Vector3 ] ) \u2013 Values to find the upper bound. Returns : Highest value for each component among given values. Return type : Vector3", "title": "utils"}, {"location": "../usage.html", "text": "Usage", "title": "Usage"}, {"location": "../usage_launchbraynsbackend.html", "text": "Running a Brayns backend service For any kind of vizualization, a running instance of Brayns renderer backend with a websocket server (braynsService) is required to perform the computationally expensive tasks. An instance can be started using its executable (braynsService binary) with the following command line: $ braynsService --uri 0 .0.0.0:5000 Websocket server A brayns instance runs a websocket server if an URI is specified in the command line and can be monitored from an external application using JSON-RPC messages. Plugins Science-specific tasks (loading circuits, etc\u2026) are performed by plugins. Plugins can be loaded as command line arguments (see Brayns plugins ). Log level The log level can also be configured using \u2013log-level followed by either trace, debug, info, warn, error, critical or off. This is useful for debugging and see the requests sent from and received by the instance. $ braynsService --uri 0 .0.0.0:5000 --log-level debug Examples Example of commonly used instance: $ braynsService --uri 0 .0.0.0:5000 --log-level debug --plugin braynsCircuitExplorer The command line usage of an instance can also be retreived with: $ braynsService --help Running an instance on BB5 On BB5 the binary executable of braynsService is provided through spack. An instance can be run on a BB5 node with the following steps: 1 - Allocate a node on BB5: $ salloc --account = <your_project_account> -p interactive -t 8 :00:00 --exclusive --constraint = cpu -c 72 --mem 0 Where your_project_account should be the project account you have access to. After a successful allocation, an SSH connection with the node is opened automatically. The node ID is composed of alpha-numeric characters, for example: r2i2n11 . 2 - Launch the braynsService backend instance: To access Brayns binary executable, user must load brayns module using: $ module load unstable $ module load brayns/latest And then start Brayns instance as before: $ braynsService --uri 0 .0.0.0:5000 --plugin braynsCircuitExplorer The last command will launch a Brayns backend service on port 5000 and any client from any host can connect to it. Hint Brayns, by default, does not understand science-specific models. These specific functionalities are loaded using plugins. The CircuitExplorer plugin is the main plugin for neuroscientific visualization that you will want to load. For further information on plugins, check Brayns plugins . Now we know the host (r2i2n11) and port (5000 in this case) where our Brayns backend is running. We can connect to it through the Python client (here using uri=\u2019r2i2n11:5000\u2019). Hint If the websocket client (e.g. Python) is running outside BB5, r2i2n11 should be replaced by r2i2n11.bbp.epfl.ch. Now you can interact with the backend instance by using the Python API Using Brayns Python API .", "title": "Running a Brayns backend service"}, {"location": "../usage_usejsonrpcapi.html", "text": "Using Brayns JSON-RPC API The available entrypoints depend on the plugins loaded in the instance and are hence grouped by plugin. The Core plugin is always loaded as long as the backend instance is running a websocket server (\u2013uri provided). All entrypoints use a JSON-RPC protocol (see specifications here ). The schemas of the messages used by Brayns have the following rules. Request The request message includes the protocol version, an optional ID, a method name and optional params. The protocol version must always be 2.0. The Request ID can be ignored if you don\u2019t care about the reply. The Request ID must be integer or string if a reply is expected. The method is the name of the entrypoint (for example \u201cget-camera-look-at\u201d). The params can be anything depending on the entrypoint params schema. {{ \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"method\" : \"test\" , \"params\" : {{ \"field\" : 123 }} }} Reply The reply is sent only if the request ID is set and not null. The protocol version must always be 2.0. The ID is the one of the corresponding request it is replying to. The result field is always present but can be null depending on the schema. The result can be anything depending on the entrypoint result schema. {{ \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : {{ \"another_field\" : 456 }} }} Error The error message is sent instead of the reply if an error occurs. The protocol version must always be 2.0. The ID is the same as it would have been for the reply. The error field is always present and differentiate it from a reply. The error field contains a code, a description and optional data. The additional data are mainly used in case of invalid params to detail the schema error(s) with a list of strings. {{ \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"error\" : {{ \"code\" : 12 , \"message\" : \"Something happened\" , \"data\" : [ \"The field a.b.c is missing.\" ] }} }} Notification The notification message is used by asynchronous entrypoints to send progress messages. The protocol version must always be 2.0. Notifications have no ID by contrast with replies and errors. Notification params are always progress messages. Progress messages contain the ID of the request being processed, a description and a progress amount between 0 and 1. {{ \"jsonrpc\" : \"2.0\" , \"params\" : {{ \"id\" : 0 , \"operation\" : \"Processing stuff...\" , \"amount\" : 0.5 }} }} Further information For further information about, please refer to the API reference JSON-RPC API reference .", "title": "Using Brayns JSON-RPC API"}, {"location": "../usage_usepythonapi.html", "text": "Using Brayns Python API After launching the Brayns backend service, we have a renderer backend instance running a websocket server and we can monitor it using the web API. The Python package just wraps the websocket client and the JSON-RPC messages into a more high-level API with classes and functions. In the following section, we will assume the backend was started with: braynsService --uri 0.0.0.0:5000 The port 5000 is used in this documentation but if you want to use another one, just make sure it is available on the server machine and that you use this one instead of 5000 it in all the following examples. The IP mentioned here is from the SERVER point of view and specifies which host can connect to this server. 0.0.0.0 is a wildcard IP address which means you can connect from any machine as client. Use localhost if you want to allow only local connections. Connection to an instance To create a connection to the backend from the Python API, we need the URI of the braynsService instance we want to connect to (ip:port). The IP is always the machine the instance is running on seen from the Python client. Hint The Python API is not doing any expensive tasks so it can be run outside BB5 on a local machine (useful for debugging). Here is the URI for typical use cases: If Brayns and the Python script are running on the same machine then the URI is always localhost:5000 . If Brayns is running on a BB5 node and the Python script is on another BB5 node, then the URI is <node ID>:5000 (example r1i1n1:5000) where <node ID> is the ID of the node running the backend. If Brayns is running on a BB5 node and the Python script outside BB5, then the URI is <node ID>.bbp.epfl.ch:5000 . So for a renderer running on the node r1i1n1 started with URI 0.0.0.0:5000, the connection is made as follows from a remote machine: # Import installed brayns Python package. import brayns # Create a connector with connection settings (URI, SSL, logging, etc). connector = brayns . Connector ( 'r1i1n1.bbp.epfl.ch:5000' ) # Connect to the server instance, we use a context manager to close the # connection properly once we are done with it. It can be done manually # with instance.disconnect(). with connector . connect () as instance : # Test by printing the version of the instance we are connected to. print ( brayns . get_version ( instance )) Attention If you are connecting to a backend running on BB5, it will be necessary to be working within EPFL\u2019s network, either on-site or through the VPN. Further information For further information about, please refer to the API reference Python API reference and typical use cases examples Examples .", "title": "Using Brayns Python API"}, {"location": "../genindex.html", "text": "", "title": null}, {"location": "../py-modindex.html", "text": "", "title": null}, {"location": "../search.html", "text": "", "title": null}]}